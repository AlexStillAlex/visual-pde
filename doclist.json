[{"layout":"page","title":"Chemical Basis of Morphogenesis","lesson_number":30,"thumbnail":"/assets/images/chemicalBasis.webp","extract":"A transformative text","equation":"$\\pd{u}{t}=\\nabla^2 u+a-u+u^2v$, $\\pd{v}{t}=D\\nabla^2v+ b-u^2v$","body":"This is the first page of Alan Turing's [The Chemical Basis of Morphogenesis](https://en.wikipedia.org/wiki/The_Chemical_Basis_of_Morphogenesis) paper undergoing pattern formation. The kinetics are exactly from the [Schnakenberg example](/mathematical-biology/schnakenberg):\n\n$$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u+a-u+u^2v,\\\\ \\pd{v}{t}&=D\\nabla^2v+ b-u^2v,\\end{aligned}$$\n\nbut we have taken an initial condition from an image of the first page of Turing's text.\n\n* Load the [interactive simulation](/sim/?preset=chemicalBasisOfMorphogenesis).\n\n* Press {{ layout.play }} to see this evolve! You can pause the simulation and press {{ layout.erase }} to reset the text. \n\n* Modifying different parameters (particularly $b$) can lead to qualitatively different solutions. Try $b=0.6$ for example. Try decreasing $b$ very slowly with the slider to see the pattern change.\n","url":"/art-pdes/chemical-basis","tags":"","img":"/assets/images/chemicalBasis.webp","id":0},{"layout":"page","title":"We ❤️ PDEs","lesson_number":20,"thumbnail":"/assets/images/hearts.webp","extract":"Beating hearts and slime moulds","equation":"$\\pd{u}{t}=\\nabla^2 u+$❤️","body":"Here are some examples of a PDE solutions on a domain based on a [heart-shaped curve](https://mathworld.wolfram.com/HeartCurve.html). \n\n# Excitability\n\nModels like [FitzHugh–Nagumo](/mathematical-biology/fitzhugh-nagumo) are the basis for a lot of work in cardiac electrophysiology and related areas. So let's solve these PDEs in a heart!\n\n* Load the [interactive simulation](/sim/?preset=FHNBeatingHeart) and enjoy. You can click {{ layout.views }} and select **3D** to get a 3D view of the beating heart. Try [this simulation](/sim/?preset=FHNGrowingHeart) for a crude implementation of these equations on a growing domain.\n\n# Chemotaxis\n\nThe next example is based on the [Keller--Segel model for chemotaxis](/mathematical-biology/keller-segel). Load the [interactive simulation](/sim/?preset=KellerSegelHeart) and enjoy! Try [this simulation](/sim/?preset=KellerSegelGrowingHeart) for a crude implementation of these equations on a growing domain.\n\n# Warm hearted\n\nBy plotting vector fields on top of the solutions to PDEs, as exemplified in [the heat equation](/basic-pdes/heat-equation), we can visualise how heat flows from a source as it traces out a heart in this [interactive simulation](/sim/?preset=heatHeart).\n","url":"/art-pdes/chemotaxis-love","tags":"","img":"/assets/images/hearts.webp","id":1},{"layout":"page","title":"Kovalevskaya on Chaos","lesson_number":5,"thumbnail":"/assets/images/Kovalevskaya.webp","extract":"Playing in time and space","equation":"$\\pd{\\psi}{t}=(D_r+\\i D_i)\\nabla^2 \\psi+(a_r+\\i a_i)(1-I_S(x,y))\\psi+(b_r+\\i b_i)\\psi|\\psi|^2$","body":"Functions of space can allow us to change how a PDE solution varies in space and time. This page explores an example using an image of [Sofya Kovalevskaya](https://en.wikipedia.org/wiki/Sofya_Kovalevskaya) encoded as the function $I_S(x,y)$. The system uses the [Complex Ginzburg-Landau equation](/nonlinear-physics/nls-cgl).\n\n* Load one of the interactive simulations demonstrating [dark soliton pinning](/sim/?preset=SofyaCGLEDuckPinning), [localised chaos](/sim/?preset=SofyaCGLEChaos), or [fireflies](/sim/?preset=SofyaCGLEFireflies). \n\n* You can upload your own image by clicking on {{ layout.settings }}→**Images** and then clicking on the image of Sofya Kovalevskaya face next to $I_S(x,y)$. The image will be effectively treated as a greyscale function $I_T(x,y)$, which will be approximately 1 when the image is close to white and approximately 0 when the image is close to black.\n\n* Change $I_T$ to $I_S$ in {{ layout.equations }}→**Definitions** to see another famous mathematical face: [Alan Turing](https://en.wikipedia.org/wiki/Alan_Turing).\n\n* You can upload a replacement for either of these images under {{ layout.settings }}→**Images**. They can each be used as heterogeneities in many parts of VisualPDE.\n","url":"/art-pdes/kovalevskaya","tags":"","img":"/assets/images/Kovalevskaya.webp","id":2},{"layout":"page","title":"A-maze-ing PDEs","lesson_number":50,"thumbnail":"/assets/images/maze.webp","extract":"Searching for love in all the wrong places","equation":"$\\pd{🐀}{t}=D_🐀\\vnabla\\cdot (\\vnabla 🐀-g(🐀)\\vnabla🧀)+f(🐀,🧀),$ $\\pd{🧀}{t}=D_🧀 \\nabla^2🧀+g(🐀,🧀)$","body":"This is a simulation of a chemotaxis-like system which tries to solve a maze by gobbling up all the food as it goes. There is a source of food at the edge of the maze, and some initial (but slowly decaying) food spread throughout the maze. Will the population make it to the end? Can a web-based PDE solver help complete such puzzles?\n\nFind out in the [interactive simulation](/sim/?preset=maze)!\n\n$$\n\\begin{aligned}\\pd{🐀}{t}&=D_🐀\\vnabla\\cdot (\\vnabla 🐀-g(🐀)\\vnabla🧀)+f(🐀,🧀),\\\\ \\pd{🧀 }{t}&=D_🧀 \\nabla^2🧀 +g(🐀,🧀)\\end{aligned}\n$$\n","url":"/art-pdes/maze","tags":"","img":"/assets/images/maze.webp","id":3},{"layout":"page","title":"Spiral waves","lesson_number":40,"thumbnail":"/assets/images/spiralWaves.webp","extract":"You spin me right ’round, baby","equation":"$\\pd{u}{t}=D_u\\nabla^2 u+au-(u+cv)(u^2+v^2),$ $\\pd{v}{t}=D_v\\nabla^2v+av+(cu-v)(u^2+v^2)$","body":"This is a simulation of a reaction–diffusion system loosely related to $\\lambda$-$\\omega$ models of spiral waves, which takes the form:\n\n$$\n\\begin{aligned}\\pd{u}{t}&=D_u\\nabla^2 u+au-(u+cv)(u^2+v^2),\\\\ \\pd{v}{t}&=D_v\\nabla^2v+av+(cu-v)(u^2+v^2),\\end{aligned}\n$$\n\n* Load the [interactive simulation](/sim/?preset=lambdaOmega). This plots the solution as the quantity $u^2+v^2$, which evolves from a wave-like initial condition into broken waves which coalesce into spiral waves as the seemingly most stable structures.\n\n* Clicking can perturb these waves, and clicking with dragging can induce new spiral centres (or destroy old ones).\n\n* You can also generate your own waves by setting the initial conditions to zero under {{ layout.equations }} → **Initial conditions**, and then clicking to generate radial pulses, or dragging to perturb them.\n","url":"/art-pdes/spiral-waves","tags":"","img":"/assets/images/spiralWaves.webp","id":4},{"layout":"page","title":"Turing on Turing","lesson_number":10,"thumbnail":"/assets/images/alan4.webp","extract":"Or upload your own image!","equation":"$\\pd{u}{t}=\\nabla^2 u+(1-T(x,y)) - u + u^2v$, $\\pd{v}{t}=D\\nabla^2v+ 1 - u^2v$","body":"Functions of space can allow us to change how a PDE solution varies in space and time. Here is an example using such a function, given by $I_T(x,y)$, where this function represents a picture. The equations are based on the [Schnakenberg](/mathematical-biology/schnakenberg) model.\n\n* Load the [interactive simulation](/sim/?preset=Alan). \n\n* You can upload your own image by clicking on {{ layout.settings }}→**Images** and then clicking on the image of [Alan Turing](https://en.wikipedia.org/wiki/Alan_Turing)'s face next to $I_T(x,y)$. The image will be effectively treated as a greyscale function $I_T(x,y)$, which will be approximately 1 when the image is close to white and approximately 0 when the image is close to black.\n\n* Change $I_T$ to $I_S$ in {{ layout.equations }}→**Definitions** to see another famous mathematical face. [Sofya Kovalevskaya](https://en.wikipedia.org/wiki/Sofya_Kovalevskaya) also has her own [interactive simulation](/sim/?preset=Sofya).\n\n* You can upload a replacement for either of these images under {{ layout.settings }}→**Images**. They can each be used as heterogeneities in many parts of VisualPDE.\n","url":"/art-pdes/turing-face","tags":"","img":"/assets/images/alan4.webp","id":5},{"layout":"page","title":"Convection–diffusion","lesson_number":70,"thumbnail":"/assets/images/AdvectionEquation.webp","extract":"Movement along streamlines","equation":"$\\pd{u}{t}=D \\nabla^2 u-\\v{v}\\cdot \\vnabla u$","body":"We now look at the [advection equation](https://en.wikipedia.org/wiki/Advection#The_advection_equation) with diffusion (also known as the [convection–diffusion equation](https://en.wikipedia.org/wiki/Convection%E2%80%93diffusion_equation), or sometimes the damped one-way wave equation). This takes the form\n\n$$\\pd{u}{t}=D \\nabla^2 u-\\v{v}\\cdot \\vnabla u,$$\n\nwhere we consider two forms of the advection/drift velocity $\\v{v}$: \n\n$$\n\\begin{align}\n\\v{v} &= V(y,-x),\\\\\n\\text{or} \\quad \\v{v} &= V(\\cos(\\theta),\\sin(\\theta)),\n\\end{align}\n$$\n\nwhere $\\theta$ is a parameter\n\nThe first of these expressions is a rotational velocity field about the centre of the domain, whereas the second is linear (unidirectional) advection in the direction $\\theta$. \n\n* Load the [interactive simulation with rotational advection](/sim/?preset=AdvectionEquationRotational). By default it uses Dirichlet boundary conditions.\n\n* Clicking in the domain introduces some amount of mass which diffuses and advects along the rotating vector field. Importantly, Dirichlet boundary conditions will not conserve mass, and so you may see odd effects near the edges of the domain, such as the concentration being destroyed.\n\n* Changing the value of $V$ will change the speed of the rotation, though $V$ much larger than the initial value may lead to bad solutions (see the numerical notes below). Making $V$ negative will change the direction of the rotation.\n\n* Now click the [interactive simulation with unidirectional advection](/sim/?preset=AdvectionEquationDirected). By default it uses Periodic boundary conditions.\n\n* Changing $\\theta$ will change the direction of advection, and $V$ the magnitude. This form of advection is less sensitive to details like boundary conditions, so these can be changed to explore different scenarios.\n\n* In both examples, you can go to {{ layout.views }} to change to a view that also plots the vector field $\\v{v}$ as arrows on top of the concentration profiles.\n\n## Numerical notes\n\nFirst-order derivatives are in general harder to deal with numerically for a variety of reasons, and in particular models involving them can depend more subtly on details such as smoothness of initial conditions. In this example, we are using a different form of the brush, which can be found under <span class='click_sequence'>{{ layout.settings }} → **Brush**</span> This adds some smoothing to the boundaries of the bump each time the screen is clicked. This is important to reduce spurious oscillations due to the first derivative terms.\n","url":"/basic-pdes/advection-equation","tags":"","img":"/assets/images/AdvectionEquation.webp","id":6},{"layout":"page","title":"Get started with the heat equation","lesson_number":10,"thumbnail":"/assets/images/heat-equation.webp","extract":"Let's see how heat diffuses over time","equation":"$\\pd{T}{t}=D_T \\nabla^2 T$","body":"Let's start by solving the [heat equation](https://en.wikipedia.org/wiki/Heat_equation),\n\n$$\\pd{T}{t}=D_T \\nabla^2 T,$$\n\non a [rectangular 2D domain](/user-guide/quick-start#domain-shape) with homogeneous Neumann (aka no-flux) [boundary conditions](/user-guide/quick-start#boundary-conditions),\n\n$$\\pd{T}{x}(0,y,t) = \\pd{T}{x}(L_x,y,t) = \\pd{T}{y}(x,0,t) = \\pd{T}{y}(x,L_y,t) = 0.$$\n\n1. Load the [interactive simulation](/sim/?preset=heatEquation), which has been set up for this tutorial.\n\n1. Click on the screen to visualise the spread of heat throughout the domain. When you click, you add localised heat to the domain.\n\n1. Now press {{ layout.pause }}, paint some initial data, and then press {{ layout.play }} to set it in motion.\n\n1. Press {{ layout.erase }} to clear the screen.\n\n1. You can press {{ layout.views }} to change from a plot of just the density of $T$ to a plot of $T$ augmented with the vector field given by $-\\nabla T$. This makes arrows that show the flux of heat as it dissipates and moves around the domain.\n\n### Playing with the diffusion coefficient, $D_T$\n\nWhat does changing the diffusion coefficient, $D_T$, do? \n\n1. Change its value by clicking {{ layout.equations }} and editing the value of $D_T$: try increasing it by a factor of 10. \n\n1. Now click again on the screen and see how fast this blob spreads out throughout the domain. \n\nExplore how the speed depends on the diffusion coefficient. You can safely increase $D_T$ up to around $D=50$ without hitting numerical problems: see the discussion on [timestepping issues](/user-guide/solver#timestepping). \n\n### Playing with boundary conditions\n\nWhat effect do the boundary conditions have? \n\n1. Click around the corners and edges to see how the Neumann boundary conditions conserve the total amount of heat within the domain. \n\n1. Now, go to <span class='click_sequence'>{{ layout.equations }} → **Boundary conditions**</span> and select **Periodic** for $T$. What do you notice? Is the total amount of heat still conserved? \n\n1. What if you change the boundary conditions to **Dirichlet**? \n\nExplore how heat flows through the domain under these different scenarios.\n\n### Exact solutions in 1D\n\nWe now explore analytical solutions in one spatial dimension. We can solve the equation to get the following solution using the initial condition,\n\n$$\nT(x,0) = \\cos\\left(\\frac{m\\pi}{L}\\right) \\implies T(x,t) = \\mathrm{e}^{-Dt\\left(\\frac{m\\pi}{L}\\right)^2}\\cos\\left(\\frac{m\\pi x}{L}\\right),\n$$\n\nwith $m$ a positive integer. These solutions decay to 0 as time increases. Importantly, the rate of decay depends on the frequency of the initial perturbation $m$, with larger $m$ (or larger $D_T$) leading to more quickly decaying solutions. You can explore these solutions [here](/sim/?preset=heatEquation1D).\n","url":"/basic-pdes/heat-equation","tags":"","img":"/assets/images/heat-equation.webp","id":7},{"layout":"page","title":"Sources and sinks of heat","lesson_number":30,"thumbnail":"/assets/images/InhomHeatEquation.webp","extract":"Diffusion in an inhomogeneous medium","equation":"$\\pd{T}{t}= \\vnabla\\cdot(g(x,y)\\vnabla T)+f(x,y)$","body":"We now consider an inhomogeneous [heat equation](https://en.wikipedia.org/wiki/Heat_equation) given by\n\n$$\\pd{T}{t}=D \\nabla^2 T+f(x,y),$$ \n\n$$f(x,y) = D\\pi^2\\left(\\frac{n^2}{L_x^2} + \\frac{m^2}{L_y^2}\\right)\\cos \\left(\\frac{n\\pi x}{L_x} \\right)\\cos \\left(\\frac{m\\pi y}{L_y} \\right)$$\n\nwith homogeneous Neumann (aka no-flux) boundary conditions on a rectangular domain with side lengths $L_x$, $L_y$. You can use [separation of variables](https://en.wikipedia.org/wiki/Separation_of_variables#Partial_differential_equations) to show that the solution at steady state looks like\n\n$$T(x,y) = -\\cos \\left(\\frac{n\\pi x}{L_x} \\right)\\cos \\left(\\frac{m\\pi y}{L_y} \\right).$$\n\n* Load the [interactive simulation](/sim/?preset=inhomogHeatEquation). \n\n* You can change the values of $m$ and $n$ to observe different patterns of sources/sinks of heat in the domain.\n\n* You can use any function $f(x,y)$ instead of the one given above. However, if $f(x,y)$ does not satisfy the constraint that $\\int_0^{L_y}\\int_0^{L_x} f(x,y) \\, \\d x \\, \\d y=0$, then the solution will either grow or decrease without bound. An easy way to prove this is to multiply the equation by $T$ and integrate to find, after applying the Neumann boundary conditions,\n \n$$\n\\frac{1}{2}\\pd{}{t}\\int_0^{L_y} \\int_0^{L_x} T^2 \\, \\d x \\, \\d y = \\int_0^{L_y}\\int_0^{L_x} f(x,y) \\, \\d x \\, \\d y.\n$$\n\n## Inhomogeneous transport\n\nWe can also consider a diffusion coefficient which varies in space by studying\n\n$$\n\\pd{T}{t}= \\vnabla\\cdot(g(x,y)\\vnabla T),\n$$\n\nwhere we need $g(x,y)>0$ for all $x,y$ in the domain. As a simple (though complicated-looking) example, we take,\n\n$$g(x,y) = D\\left[1+E\\cos\\left(\\frac{n \\pi}{L_xL_y}\\sqrt{(x-L_x/2)^2+(y-L_y/2)^2}\\right)\\right],$$\n\nwhere $D>0$, $n>0$, and $\\lvert E\\rvert <1$ are constants. This represents radially-oscillating regions of high and low diffusion. Setting an initial condition of $$u(x,y,0)=1$$ and Dirichlet boundary conditions, we can observe an immediate partitioning of the initial heat into regions bounded by the maxima of the cosine function. Click [here](/sim/?preset=inhomogDiffusionHeatEquation) to see this, and play around with the values of $n$, $E$ and $D$.\n","url":"/basic-pdes/inhomogeneous-heat-equation","tags":"","img":"/assets/images/InhomHeatEquation.webp","id":8},{"layout":"page","title":"Inhomogeneous waves","lesson_number":40,"thumbnail":"/assets/images/InhomWaveEquation.webp","extract":"Waves in an inhomogeneous medium","equation":"$\\pdd{u}{t}= \\vnabla\\cdot(f(x,y)\\vnabla u) $","body":"We now consider an inhomogeneous [wave equation](https://en.wikipedia.org/wiki/Heat_equation),\n\n$$\\pdd{u}{t}=\\vnabla\\cdot(f(x,y)\\vnabla u),$$\n\nwith homogeneous Neumann (aka no-flux) boundary conditions. This equation can be solved numerically as long as $f(x,y)>0$ for all $x,y$ in the domain.\n\n* Load the [interactive simulation](/sim/?preset=inhomogWaveEquation), which uses the example\n\n    $$f(x,y) = D(1+E\\sin(m\\pi x/L_x))(1+E\\sin(n\\pi y/L_y)).$$\n\n    Importantly, we need $\\lvert E\\rvert<1$ to ensure the solution makes sense.\n\n* You can change the values of $m$ and $n$ to observe different patterns of regions where waves propagate at different speeds. In particular, using the the function $f(x,y)$ above will lead to corners inside of the domain with very slow wave speeds, and these will become visually apparent quickly.\n\n* Unlike in the [homogeneous case](/basic-pdes/wave-equation), we by default plot $u$ here, but you can change this to $v$ by clicking {{ layout.views }}.\n\n### Damped waves and inhomogeneous boundaries\n\nWe next consider the damped wave equation,\n\n\n$$\\pdd{u}{t} +d\\pd{u}{t}=D\\nabla^2 u,$$\n\nwith inhomogeneous Dirichlet boundary conditions,\n\n$$u|_{\\partial \\Omega} = \\cos(m x \\pi/100)\\cos(m y \\pi/100),$$\n\non a square domain. An undamped version of this equation ($d=0$) is given [here](/sim/?preset=dampedWaveEquation). You can vary the frequency $m$, or increase the damping $d$ to, for example, $d=0.01$ to observe how this changes the wave propagation into the domain from the boundaries.\n","url":"/basic-pdes/inhomogeneous-wave-equation","tags":"","img":"/assets/images/InhomWaveEquation.webp","id":9},{"layout":"page","title":"Bending beams and deforming plates","lesson_number":60,"thumbnail":"/assets/images/plateEquation.webp","extract":"The plate equation","equation":"$\\pdd{u}{t}=-D^2 \\nabla^4 u-Q$","body":"We next consider a (damped) [beam equation](https://en.wikipedia.org/wiki/Euler%E2%80%93Bernoulli_beam_theory):\n\n$$\\pdd{u}{t}+ C\\pd{u}{t}=-D^2 \\frac{\\partial^4 u}{\\partial x^4} u-Q,$$\n\ninitially with fixed boundary conditions given by\n\n$$u=0 \\quad \\text{and} \\quad \\pdd{u}{x} = 0 $$\n\nalong the boundary. The constant $D$ represents the relative size of the domain and its material properties (e.g. stiffness), $C>0$ is a damping constant, and $q>0$ a gravity-like force.\n\n* Load the [interactive simulation](/sim/?preset=BeamEquation). \n\n* Click to push down on the beam, creating a localised depression which creates ripples in the beam nearby. \n\n* Now go to <span class='click_sequence'>{{ layout.equations }} → **Boundary conditions**</span> and select **Neumann** for $u$, $v$, and $w$. This will use the following 'free end' boundary conditions:\n\n$$\n\\pdd{u}{x}=0 \\quad \\text{and} \\quad \\frac{\\partial^3 u}{\\partial x^3}  = 0. \n$$\n\n## Deformable plates\nLet's next look at the (damped) [plate equation](https://en.wikipedia.org/wiki/Kirchhoff%E2%80%93Love_plate_theory),\n\n$$\\pdd{u}{t}+ C\\pd{u}{t}=-D^2 \\nabla^4 u-Q,$$\n\nwith fixed boundary conditions given by\n\n$$u=0 \\quad \\text{and} \\quad \\nabla^2 u = 0 $$\n\nalong the boundary. \n\n* Load the [interactive simulation](/sim/?preset=plateEquation). \n\n* Initially the plate is deformed to a value of $u=-4$ everywhere, representing an initial deformation which instantaneously snaps to the fixed condition of $u=0$ at the edges, which gives rise to compression waves which propagate inwards. \n\n* Click to compress the plate downward locally, and observe waves propagating from this disturbance.\n\n## Numerical notes\n\nAs in previous examples, we must write the second time derivative using a system of first-order equations. We also have to use an algebraic equation to represent the biharmonic term:\n\n$$\\begin{aligned}\\pd{u}{t}&=v+DD_c\\nabla^2 u,\\\\\n \\pd{v}{t} &= -D \\nabla^2 w -Cv -Q,\\\\\n w &= D \\nabla^2u,\n \\end{aligned}$$\n\nwhich is the plate equation for $D_c=0$. The parameter $D_c$ is used to prevent spurious oscillations as seen in the wave equation.\n\n## 3D deformations\n\n\n* Load the [interactive simulation](/sim/?preset=plateEquation3D) and click! This is the same simulation as in the 2D plate equation above, but shown in 3D with a view that can be rotated.\n","url":"/basic-pdes/plate-equation","tags":"","img":"/assets/images/plateEquation.webp","id":10},{"layout":"page","title":"Schrödinger equation","lesson_number":50,"thumbnail":"/assets/images/SchrodingerEquation.webp","extract":"Quantum mechanics","equation":"$i\\hbar\\pd{\\psi}{t}=-\\frac{\\hbar}{2m}\\nabla^2 \\psi+V(x,t)\\psi$","body":"We now consider the [Schrödinger equation](https://en.wikipedia.org/wiki/Schrödinger_equation),\n\n$$i\\hbar\\pd{\\psi}{t}=-\\nabla^2 \\psi+V(x,t)\\psi,$$\n\nwith homogeneous Dirichlet boundary conditions. We will first consider a variant of this equation with *artificial diffusion*, as in [the wave equation](/basic_pdes/wave-equation) shown before, which takes the form\n\n$$\\pd{\\psi}{t}=iD\\nabla^2 \\psi+DC\\nabla^2 \\psi,$$\n\nwhere $D,C>0$ are positive constants. We use the initial condition \n\n$$\\psi(x,y,0) = \\sin(m\\pi x)\\sin(n\\pi y),$$ \n\nas this corresponds to a given energy state of the system.\n\n* Load the [interactive simulation](/sim/?preset=stabilizedSchrodingerEquation). \n\n* You can change the initial eigenfunction frequency by modifying $n$ and $m$, and then pressing 'R' to restart the simulation.\n\n* By default, the solution plotted is the density $$\\lvert \\psi\\rvert^2 = \\Re(\\psi)^2+\\Im(\\psi)^2 = u^2+v^2$$, which will be (approximately) stationary for long periods of time. You can plot only the real or imaginary part under the Views pane by clicking {{ layout.views }}, and see how these solutions now oscillate in both space and time. Increasing the values of $n$ and $m$ will increase the speed at which this oscillation occurs, as such an initial condition will correspond to higher energy states.\n\n## Heterogeneous potentials\n\nWe can also choose a potential $V(x,y)$ which has the effect of localising some features of the solution. As an example, we consider \n\n$$\\begin{aligned}V(x,y) &= \\sin(n \\pi x)\\sin(m\\pi y),\\\\ \\psi(x,y,0) &= (\\sin(\\pi x)\\sin(\\pi y))^{10},\n\\end{aligned}$$\n\nwhich can be played with [here](/sim/?preset=stabilizedSchrodingerEquationPotential). As the solution evolves, one can observe *tunnelling* from local potential wells where the solution is highly concentrated, out to potential wells further away from the localised initial condition. Note that here the colour scale is constantly changing to observe the maximal and minimal values of $\\lvert \\psi \\rvert$, as these vary substantially during an oscillation.\n\n## Numerical notes\n\nThe solver only works for real systems of equations. So in fact what is being simulated is the system\n\n$$\\begin{aligned}\\pd{u}{t}&=-D\\nabla^2 v+CD\\nabla^2 u+V(x,y) v,\\\\ \n\\pd{v}{t} &= D\\nabla^2 u+CD\\nabla^2 v-V(x,y)u,\n\\end{aligned}$$\n\nwhich is a (nondimensionalised) Schrödinger equation for $C=0$. The parameter $C$ is used to prevent spurious oscillations. Of course, even with this artificial parameter $C$, our numerical method does not preserve probability, given by\n\n$$\n\\int_0^L \\int_0^L |\\psi|^2 \\d x \\, \\d y = \\int_0^L \\int_0^L (u^2+v^2) \\, \\d x \\, \\d y = 1,\n$$\n\nas can be seen in the 1D example below. \n\n## Particle in a 1D potential well\n\nWe can consider an analogue of a particle in a potential well by putting a [Gaussian wave packet](https://en.wikipedia.org/wiki/Wave_packet#Gaussian_wave_packets_in_quantum_mechanics) inside a quadratic potential. For short times, such a wave packet acts like a particle bouncing between the two walls of the potential with some fixed energy, as you can see [here](/sim/?preset=stabilizedSchrodinger1D). The total probability, shown in the bottom corner, is approximately conserved here as we have set $C=1$ and taken a sufficiently small simulation step, consistent with [more sophisticated simulation techniques](http://www.astro.utoronto.ca/~mahajan/notebooks/quantum_tunnelling.html). See the discussion at the bottom of [Validating VisualPDE](/numerical-methods/validating-VisualPDE) for more details about the sensitivity to timestepping accuracy.\n","url":"/basic-pdes/stabilised-schrodinger","tags":"","img":"/assets/images/SchrodingerEquation.webp","id":11},{"layout":"page","title":"Explore the wave equation","lesson_number":20,"thumbnail":"/assets/images/waveEquation.webp","extract":"Play with waves and vibrations","equation":"$\\pdd{u}{t}=D \\nabla^2 u$","body":"Let's next look at the [wave equation](https://en.wikipedia.org/wiki/Wave_equation),\n\n$$\\pdd{u}{t}=D \\nabla^2 u,$$\n\non a rectangular 2D domain with homogeneous Neumann (aka no-flux) boundary conditions,\n\n$$\\pd{u}{x}(0,y,t) = \\pd{u}{x}(L_x,y,t) = \\pd{u}{y}(x,0,t) = \\pd{u}{y}(x,L_y,t) = 0.$$\n\n1. Load the [interactive simulation](/sim/?preset=waveEquation), which has been set up for this tutorial.\n\n1. Click on the screen to visualise a disturbance in the medium which will then propagate in all directions. \n\n1. Now press {{ layout.pause }}, paint some initial data, and then press {{ layout.play }} to set it in motion.\n\n1. Press {{ layout.erase }} to clear the screen. \n\n### Playing with the diffusion coefficient, $D$\n\nWhat does changing the diffusion coefficient, $D$, do? \n\n1. Change its value by clicking <span class='click_sequence'>{{ layout.equations }} → **Parameters**</span> and editing the value of $D$: try increasing it by a factor of 10 or even 100. \n\n1. Now click again on the screen and see how fast the disturbance spreads out throughout the domain. \n\nExplore how the speed depends on the diffusion coefficient.\n\n## Numerical notes\n\nThe VisualPDE solver only works for systems of first-order (in time) equations. So in fact what is being simulated is the system\n\n$$\\begin{aligned}\\pd{u}{t}&=v+CD\\nabla^2 u,\\\\\n \\pd{v}{t} &= D \\nabla^2 u,\n \\end{aligned}$$\n\nwhich becomes the wave equation when $C=0$. Note that the term in the second equation is a kind of *cross-diffusion*, with $u$ diffusing into $v$.\n\nThe parameter $C$ is used to prevent spurious oscillations due to the equation being [hyperbolic](https://en.wikipedia.org/wiki/Hyperbolic_partial_differential_equation). Try varying the value of $C$ to observe how it changes the solution structure.\n\n## Standing wave solutions\n\nIf we take initial conditions of \n\n$$\\begin{aligned}u(x,y,0) &= \\cos\\left(\\frac{n \\pi x}{L_x}\\right)\\cos\\left(\\frac{m \\pi y}{L_y}\\right),\\\\ \n\\pd{u}{t}(x,y,0)&=0,\\end{aligned}$$ \n\nwith Neumann boundary conditions, we can find a standing wave solution of the form\n\n$$\nu(x,y,t) = \\cos\\left(D\\pi\\sqrt{\\frac{n^2}{L_x^2}+\\frac{m^2}{L_y^2}}\\,t\\right)\\cos\\left(\\frac{n \\pi x}{L_x}\\right)\\cos\\left(\\frac{m \\pi y}{L_y}\\right),\n$$\n\nwhich oscillates in time and space. \n\nYou can play with such an initial condition [here](/sim/?preset=waveEquationICs), changing $n$ and $m$ in <span class='click_sequence'>{{ layout.equations }} → **Parameters**</span> and restarting the simulation by pressing {{ layout.erase }} to see how these parameters influence the solution. \n\nThe damping factor $C$ is also set to zero in this case. If you increase its value, the solution amplitude will decay over time. If you change the boundary conditions to Dirichlet (and set $C=0.01$), the simulation will exhibit some fascinatingly symmetric oscillations.\n\n\n## 1D and 2D waves\n\nIn a 1D domain, [d'Alembert's solution](https://mathworld.wolfram.com/dAlembertsSolution.html) to the wave equation can be used to show that an initial disturbance in $u$ (and not $u_t$) will cause rightward and leftward moving waves.\n\nThis can be seen in this [1D simulation](/sim/?preset=waveEquation1D). In principle the same concept works for higher dimensions, though reflections from boundary conditions can lead to more complicated behaviour, as seen in this [2D simulation](/sim/?preset=waveEquation3D) plotted as a surface.\n\n","url":"/basic-pdes/wave-equation","tags":"","img":"/assets/images/waveEquation.webp","id":12},{"layout":"page","title":"Turing instabilities are not enough","lesson_number":140,"thumbnail":"/assets/images/TuringNotEnough.webp","extract":"Beyond the limits of linear theory","body":"Linear stability theory is often used to predict regions of pattern-forming (or 'Turing') instabilities. However, in the presence of multiple homogeneous equilibria, these instabilities do not guarantee that a system develops a pattern. Here, we implement interactive versions of three local models in the paper \"[Turing instabilities are not enough to ensure pattern formation](https://arxiv.org/abs/2308.15311).\"\n\nIn each case, the default is a 2D spatial domain with periodic boundary conditions. The boundary conditions can be modified by clicking {{ layout.equations }} → **Boundary conditions**, and the domain can be changed to a 1D interval by clicking {{ layout.settings }} → **Domain** and setting the dimension to be 1. By default an initial small random perturbation of a homogeneous equilibrium is used to generate a Turing instability which eventually leads to the solution approaching a different homogeneous equilibrium. You can alternatively click to introduce a localised perturbation, or directly input a different initial condition. Importantly all parameters and functional forms can also be changed. Below we highlight specific parameters that give different dynamics.\n\n### Reaction--diffusion system\n[This simulation](/sim/?preset=TuringNotEnoughRD) explores the reaction--diffusion system\n\n$$\n\\begin{aligned}\n\\pd{u}{t}&=\\nabla^2 u+u-v-eu^3,\\\\ \\pd{v}{t}&=D\\nabla^2 v+ a v(v + c)(v - d) +  b u - e v^3.\n\\end{aligned}\n$$\n\n### Keller--Segel chemotaxis\n[This simulation](/sim/?preset=TuringNotEnoughKellerSegel) corresponds to the equations\n\n$$\n\\begin{aligned}\\pd{u}{t} &=  \\nabla^2 u - c\\vnabla \\cdot(u\\vnabla v) +u(b - u)(u - d),\\\\\n\\pd{v}{t} &= D \\nabla^2 v + u-av.\n\\end{aligned}\n$$\n\nLocalised solutions can be found by setting $c=5$ and $d=0.1$. Reducing $d$ further to $0.01$ for this value of $c$ leads to spatiotemporal behaviour similar to using the purely logistic demographic term as in [this Keller-Segel simulation](/mathematical-biology/keller-segel).\n\n### Biharmonic equation\n[This simulation](/sim/?preset=TuringNotEnoughBiharmonic) corresponds to the equation\n\n$$\n\\pd{u}{t} = - D\\nabla^2 u -  \\nabla^4 u + au(c - u)(u - b).\n$$\n\nSetting $D=1.87$ will instead lead to localised states that are near the boundary of stability. These will decay slowly for $D\\leq 1.85$ but appear to remain stable for $D=1.87$.","url":"/mathematical-biology/Turing-conditions-are-not-enough","tags":"","img":"/assets/images/TuringNotEnough.webp","id":13},{"layout":"page","title":"Bistability: invasion and persistence","lesson_number":30,"thumbnail":"/assets/images/bistableTravellingWaves.webp","extract":"Spatial Allee effects and changing wavespeeds","equation":"$\\pd{u}{t}=D\\nabla^2 u +u(u-a)(1-u)$","body":"Next we'll consider a bistable reaction--diffusion equation, sometimes referred to as the [Allen--Cahn](https://people.maths.ox.ac.uk/trefethen/pdectb/allen2.pdf) or Chaffee--Infante equation,\n\n$$\\pd{u}{t}=D\\nabla^2u +u(u-a)(1-u),$$\n\nwhere $a \\in (0,1)$ is a parameter. As with the [Fisher–KPP equation](travelling-wave), this system will admit travelling waves. Here however, one can show that the wavespeed is proportional to\n\n$$\nc \\propto \\int_0^1 u(u-a)(1-u)\\, \\d u = \\frac{1-2a}{12},\n$$\n\nand hence we expect the waves to change their direction of travel when $a$ crosses the value 0.5. \n\n* Load the [interactive simulation](/sim/?preset=bistableTravellingWave). \n\n* Click within the box to visualise a 'line' of a population, which will then spread out as a planar wave. \n\n* The value $a=0.5$ is the threshold between expanding and contracting waves (positive or negative $c$ values). Take values of $a=0.4$, $a=0.6$, and $a=0.5$ to see how this influences the propogation of this wave. \n\n* You can change the brush to form circular regions (or input directly initial conditions) to see how other geometries of spreading waves are affected by parameter variations in this bistable system.\n\n# Spatial Allee effects\n\nIn the above simulations, we considered $a$ near the boundary, and initial waves that had sufficient size. Biologically we are often interested in the question of small invading populations, which becomes complex when both extinction ($u=0$) and persistence ($u=1$) are possible. We'll set $a=0.4$ so that in principle a wave of population can invade the domain, but consider only small initial regions where $u=1$.\n\n* Load the [interactive simulation](/sim/?preset=bistableSurvival). \n\n* Click within the domain to set the value of $u$ to 1 in some small region. You should notice that the initial population dies out quickly despite $u=1$ being locally stable. Diffusion is spreading the population too quickly.\n\n* The parameter $R$ determines the size of the initial population. Increasing it slightly (e.g. setting $R=6.5$), allows the initial population to grow and overcome this diffusion-induced decay.\n\n* Alternatively, for smaller values of $R$, try pausing the simulation {{ layout.pause }}, painting a larger initial region of $u=1$, and then pressing {{ layout.play }} to set it in motion. You will notice that, for sufficiently large initial regions, the steady state $u=1$ can invade the steady state $u=0$. \n\n* The precise quantities and geometry of these initial conditions can influence persistence. It is difficult to analytically determine conditions for when an invasion is successful or not, as it can depend on both the size and shape of the initial perturbation, as well as the parameters $a$ and $D$. You can explore different values of these parameters and how they influence the success or failure of a population to persist in a new environment. \n\n# Advection & spatial Allee effects\n\nWe can add an advection term to the equation to model movement due to, e.g., putting our population in a flowing body of water. The equation now looks like:\n\n$$\\pd{u}{t}=D\\nabla^2u +u(u-a)(1-u)+V(\\cos(\\theta)u_x + \\sin(\\theta)u_y),$$\n\nwhere $V$ is a velocity and $\\theta$ is a direction of advection. We implement this in [this advective bistable simulator](/sim/?preset=BistableAdvection), starting near the critical Allee threshold with $a=0.48$. It can be an interesting task to paint an initial condition capable of surviving so close to this boundary to extinction.\n","url":"/mathematical-biology/bistable-travelling-waves","tags":"","img":"/assets/images/bistableTravellingWaves.webp","id":14},{"layout":"page","title":"Brusselator pattern formation","lesson_number":60,"thumbnail":"/assets/images/Brusselator.webp","extract":"Turing instability regions","equation":"$\\pd{u}{t}=\\nabla^2 u+a-(b+1)u+u^2v$, $\\pd{v}{t}=D\\nabla^2v+ bu-u^2v$","body":"Another [Turing](https://en.wikipedia.org/wiki/Turing_pattern) system is the [Brusselator](https://en.wikipedia.org/wiki/Brusselator), given by \n\n$$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u+a-(b+1)u+u^2v,\\\\ \\pd{v}{t}&=D\\nabla^2v+ bu-u^2v,\\end{aligned}$$\n\nwhere we take $a,b>0$.\n\n* Load the [interactive simulation](/sim/?preset=brusselator). \n\n* You can change the diffusion coefficients to effectively change the size of the domain (the diffusion coefficients will scale like $1/L^2$ where $L$ is the domain size, so decreasing both of these numbers by a factor of 100 will effectively simulate a domain 10 times larger). As the patterns have approximately fixed wavelengths, this should lead to a different number of pattern elements.\n\n* The homogeneous equilibrium is stable for $b-1<a^2$, and undergoes a Turing instability for $D>a^2/(\\sqrt{b}-1)^2$. You can check this condition for the parameters $a=2$, $b=3$, for which the instability threshold is $D_c = a^2/(\\sqrt{b}-1)^2 \\approx 7.4641$. So we expect patterns for $D=8$, and we expect the system to return to the homogeneous steady state for $D=7$.\n\n# Hyperbolic Brusselator & Turing–Wave instabilities\n\nOne can show that two–species reaction–diffusion systems can only ever have Turing–like instabilities with real growth rates. In contrast, hyperbolic reaction–diffusion systems (or systems with more than two species) allow for Turing–Wave (or sometimes Wave or Turing–Hopf) instabilities. Such instabilities lead to spatial eigenfunctions that grow and oscillate, typically giving rise to spatiotemporal dynamics. Here we consider a hyperbolic version of the Brusselator given by\n\n$$\\begin{aligned}\\tau\\pdd{u}{t}+\\pd{u}{t}&=D\\nabla^2 u+a-(b+1)u+u^2v,\\\\ \\tau\\pdd{v}{t}+\\pd{v}{t}&=\\nabla^2v+ bu-u^2v,\\end{aligned}$$\n\nwhere there are two new terms proportional to $\\tau$ and we have instead put the diffusion ratio $D$ on the $u$ equation. The normal Turing instabilities will occur for $D<1$, but new Turing–Wave instabilities may occur for $D>1$, so we set $D=2$.\n\n* In a [one-dimensional simulation](/sim/?preset=BrusselatorTuringWave1D), an initial cosine perturbation on a small domain leads to an oscillating cosine, which is what linear theory would predict. The system loses this instability as $\\tau$ is decreased to $0.1$ or below, with a decaying oscillation amplitude for intermediate values.\n\n* On a larger domain, a [two-dimensional simulation](/sim/?preset=BrusselatorTuringWave2D) exhibits a variety of transient dynamics depending on exactly how the uniform equilibrium is perturbed, culminating in `wave–like' spatiotemporal behaviour. Again decreasing $\\tau$ or increasing $D$ will reduce the effect of the instability, decreasing the amplitude of the solution.\n\nFor more details on such systems and their generalisations, [take a look at this paper](https://arxiv.org/abs/2204.13820).\n","url":"/mathematical-biology/brusselator","tags":"","img":"/assets/images/Brusselator.webp","id":15},{"layout":"page","title":"Reaction–cross-diffusion systems","lesson_number":100,"thumbnail":"/assets/images/dark-soliton.webp","extract":"Dark solitons and extended Turing spaces","equation":"$\\pd{u}{t}=\\vnabla\\cdot(D_{uu}\\vnabla u+D_{uv}\\vnabla v)+a-u+u^2v,$ $\\pd{v}{t}=\\vnabla\\cdot(D_{vu}\\vnabla u+D_{vv}\\vnabla v)+b-u^2v$","body":"We now consider an example of a cross-diffusion system based on the following reaction kinetics:\n\n$$\\begin{aligned}\\pd{u}{t}&=\\vnabla\\cdot(D_{uu}\\vnabla u+D_{uv}\\vnabla v)+a-u+u^2v,\\\\ \\pd{v}{t}&=\\vnabla\\cdot(D_{vu}\\vnabla u+D_{vv}\\vnabla v)+b-u^2v,\\end{aligned}$$\n\nwhich is a cross-diffusion version of the [Schnakenberg model](/mathematical-biology/schnakenberg).\n\n* Load the [interactive simulation](/sim/?preset=crossDiffusionSchnakenberg) \n\n* The default parameters create localised inverted spots (sometimes called 'dark solitons') wherever the perturbation is, but these do not seem to propagate patterns in any direction. \n\n* Setting the value of $b=1$ gives pattern formation closer to the Schnakenberg system observed before, though note that the self-diffusion terms are equal.\n\n* Finally taking $b=0.1$ allows for spatiotemporal behaviors, as the homogeneous equilibrium is then well into a Hopf regime.\n\n\n","url":"/mathematical-biology/cross-diffusion","tags":"","img":"/assets/images/dark-soliton.webp","id":16},{"layout":"page","title":"Cyclic competition models","lesson_number":110,"thumbnail":"/assets/images/rock-paper-scissors.webp","extract":"Rock, paper, scissors – spiral waves!","equation":"$\\pd{u}{t}=D_u\\nabla^2 u+u(1-u-av-bw)$ $\\pd{v}{t}=D_v\\nabla^2 v+v(1-bu-v-aw)$ $\\pd{w}{t}=D_w\\nabla^2 w+w(1-au-bv-w)$","body":"We now consider an example of a reaction-diffusion system based on the following reaction kinetics:\n\n$$\\begin{aligned}\\pd{u}{t}&=D_u\\nabla^2 u+u(1-u-av-bw),\\\\ \\pd{v}{t}&=D_v\\nabla^2 v+v(1-bu-v-aw),\\\\ \\pd{w}{t}&=D_w\\nabla^2 w+w(1-au-bv-w).\\end{aligned}$$\n\nThese are an example of a [generalised Lotka–Volterra](https://stefanoallesina.github.io/Sao_Paulo_School/intro.html) system. If we set $a < 1 < b$, then each population outcompetes another, and hence their relative fitness forms a cycle. This kind of model is also known as a spatial rock-paper-scissors game. To make things more interesting, we will allow the species to diffuse at different rates.\n\n* Load the [interactive simulation](/sim/?preset=cyclicCompetition)\n  \n* This begins with an initially structured population that eventually devolves into a complex spatiotemporal motion, with spiral waves a dominant feature.\n\n* This system exhibits a wide range of behaviours. One of the most interesting is that if you allow spiral waves to form, and then set all diffusion coefficients to be equal (e.g. by changing $D_u$ to $0.5$), the system will still admit spiral waves despite not having a Turing-like instability.\n","url":"/mathematical-biology/cyclic-competition","tags":"","img":"/assets/images/rock-paper-scissors.webp","id":17},{"layout":"page","title":"FitzHugh–Nagumo and excitability","lesson_number":80,"thumbnail":"/assets/images/FitzHugh-Nagumo.webp","extract":"Patterns, spiral waves, and chaos","equation":"$\\pd{u}{t}=\\nabla^2 u +u-u^3-v$, $\\pd{v}{t}=D\\nabla^2v+ \\varepsilon_v(u-a_v v-a_z)$","body":"Here we look at the  [FitzHugh–Nagumo model](https://en.wikipedia.org/wiki/FitzHugh%E2%80%93Nagumo_model){:target=\"_blank\"}, given by \n\n$$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u +u-u^3-v,\\\\ \\pd{v}{t}&=D\\nabla^2v+ \\varepsilon_v(u-a_v v-a_z),\\end{aligned}$$\n\nwhere we take $D>1$.\n\n* Load the [interactive simulation](/sim/?preset=FitzHugh-Nagumo){:target=\"_blank\"} \n\n* Click in the domain to initiate a pattern-forming instability, which will form roughly concentric rings as it expands.\n\n* This system has many different kinds of solutions which are stable over long time periods. To see this, change the initial condition, under <span class='click_sequence'>{{ layout.equations }} → **Initial conditions**</span> so that $u\\|_{t=0}$ has the value '**RAND**'.  Then press {{ layout.restart }} to restart the simulation. It should now exhibit patterns which are much more spot-like.\n\n# Turing–Hopf bifurcations\n\nWe now vary the parameters from the previous simulation so that it supports both pattern formation, but also oscillations. These oscillations come from steady states undergoing [Hopf bifurcations](https://en.wikipedia.org/wiki/Hopf_bifurcation){:target=\"_blank\"}. In such regimes, one can often find a range of complex spatial, temporal, and spatiotemporal behaviours, many of which can be simultaneously stable for different initial conditions. \n\nTo illustrate this, we consider the initial conditions\n\n$$\nu(x,y,0) = \\cos\\left(\\frac{m \\pi x}{L}\\right)\\cos\\left(\\frac{m \\pi y}{L}\\right), \\quad v(x,y,0)=0,\n$$\n\nfor some integer $m$ and domain length $L=280$. \n\n* Load the [interactive simulation](/sim/?preset=FitzHugh-Nagumo-Hopf){:target=\"_blank\"}\n\n* This simulation can display long-time solutions that exhibit all three kinds of behaviour, depending on the values of $m$, $D$, and the other parameters. Try $m=4$, $m=3$, and $m=6$ for example.\n\n# Three-species variant\n\nA three-species variant of the FitzHugh–Nagumo model is \n\n$$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u +u-u^3-v,\\\\ \\pd{v}{t}&=D_v\\nabla^2v+ \\varepsilon_v(u-a_v v-a_w w-a_z)\\\\ \\pd{w}{t}&=D_w\\nabla^2w+ \\varepsilon_w(u-w).\\end{aligned}$$\n\n* Load the [interactive simulation](/sim/?preset=FitzHugh-Nagumo-3){:target=\"_blank\"} \n\n* The simulation demonstrates the dynamics of this system in a regime which has both homogeneous limit cycles and pattern formation competing against one another.\n\n* The initial pattern formed in this simulation will eventually be destroyed by the oscillations. You can increase the value of $a_v$ to stabilise the pattern for longer, and if $a_v \\geq 0.3$, the pattern will eventually overtake the oscillations and fill the entire domain.\n","url":"/mathematical-biology/fitzhugh-nagumo","tags":"","img":"/assets/images/FitzHugh-Nagumo.webp","id":18},{"layout":"page","title":"Gierer–Meinhardt pattern formation","lesson_number":70,"thumbnail":"/assets/images/GiererMeinhardt.webp","extract":"Spots and stripes","equation":"$\\pd{u}{t}=\\nabla^2 u+a+\\frac{u^2}{v}-bu$, $\\pd{v}{t}=D\\nabla^2v+ u^2-cv$","body":"Another [Turing](https://en.wikipedia.org/wiki/Turing_pattern) system is the [Gierer–Meinhardt model](https://www.scholarpedia.org/article/Gierer-Meinhardt_model), given by \n\n$$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u+a+\\frac{u^2}{v}-bu,\\\\ \\pd{v}{t}&=D\\nabla^2v+ u^2-cv,\\end{aligned}$$\n\nwhere we take $a,b,c>0$ and $D>1$.\n\n* Load the [interactive simulation](/sim/?preset=GiererMeinhardt). \n\n* Changing any of the parameters can lead to different solutions, though this system generically favours spot-like patterns. Note that the colour scale here is fixed, but that changing parameters will lead to solutions with different maxima and minima, so using the auto-snap feature under <span class='click_sequence'>{{ layout.settings }} → **Colour** → **Auto snap**</span> may be advised.\n\n# Stripes stability\n\nWe can observe the instability of stripe patterns in this model by choosing initial conditions which become stripes along one direction. We set\n\n$$\nu(0,x,y) = 1+\\cos\\left(\\frac{n\\pi x}{L}\\right), \\quad v(0,x,y) = 1,\n$$\n\nwith $n$ an integer. \n\n* Load the [simulation](/sim/?preset=GiererMeinhardtStripeICs). \n\n* Change the value of $n$ and restart the simulation by pressing {{ layout.erase }}. In each case a different number of initial stripes will evolve into some number of stripes, but they should persist indefinitely.\n\n* Now click on or near a stripe to destabilise it into spots. Note that the brush value, found in <span class='click_sequence'>{{ layout.settings }} → **Brush**</span> is set to $1.01u$, so that it is a relatively small perturbation of the current solution. \n\n# Saturation leads to stripes\n\nA common way to obtain stripe-like patterns in this model is to consider saturation of the self-activation term ($u^2/v$ in the equation above). In this case we have the model\n\n$$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u+a+\\frac{u^2}{v(1+Ku^2)}-bu,\\\\ \\pd{v}{t}&=D\\nabla^2v+ u^2-cv,\\end{aligned}$$\n\nwhere $K>0$ is a saturation constant. \n\nFor very large values of $K$, the system will not admit Turing patterns, and for very small values it will behave as in the above spot-forming model. However for intermediate values of $K$, one can get labyrinthine patterns as [this simulation](/sim/?preset=GiererMeinhardtStripes). \n\nTry increasing or decreasing the size of $K$ to observe how this influences spot/stripe selection in the system. Note that the colour scale is changing to match solution maxima/minima.\n","url":"/mathematical-biology/gierer-meinhardt","tags":"","img":"/assets/images/GiererMeinhardt.webp","id":19},{"layout":"page","title":"Survival in a harsh environment","lesson_number":20,"thumbnail":"/assets/images/harsh-environment.webp","extract":"What if we change boundary conditions?","equation":"$\\pd{u}{t}=\\nabla^2 u+u\\left(1-\\frac{u}{K}\\right)$<br />with no-flux boundary conditions","body":"We'll continue studying the logistic reaction-diffusion model,\n\n$$\\pd{u}{t}=D\\nabla^2 u+u\\left(1-\\frac{u}{K}\\right),$$\n\nbut now we consider different boundary conditions.\n\n* Load the [interactive simulation](/sim/?preset=harshEnvironment). The initial conditions leads to population growth in select areas of the domain, which eventually reach a large density and begin spreading. As the system initially has no-flux boundary conditions, the population will reach carrying capacity everywhere.\n\n* Now change the boundary conditions to \"Dirichlet\", taking the constant value to be $0$. This will affect the solution near the domain edges, but not the interior, as the diffusion is small.\n\n* Now increase the diffusion coefficient by deleting zeroes from the value of $D$. This will increase the region over which the boundary conditions affect the structure of the solution. \n\n* One can show that the positive equilibrium exists and is globally stable if and only if\n$$\nD < \\frac{L^2}{2\\pi^2} \\approx 5.066,\n$$\nas $L=10$ in our simulation. For diffusion coefficients larger than this value, the extinction equilibrium, $u=0$, is stable. Try simulating the system at $D=4$, and $D=6$, clicking if needed to introduce some additional population into the domain. \n\n    **Note**: You can check the condition more precisely by looking at $D$ values closer to the boundary, but the timescale to reach equilibrium will be long, and the amplitude of $u$ will become very small.\n\n* The analytical condition above does not depend on the carrying capacity $K$. Set $K=1000$, and simulate the system at $D=4$ and $D=6$ in this case to confirm that $K$ will not change the boundary of where the populations persists, though it will change the structure of the solution when $u>0$. Again you may need to click to introduce some population into the domain. With this value of $K$, it is easier to see the solution's behaviour near the critical diffusion threshold. The values $D=5$ and $D=5.2$ are good choices, for example.\n","url":"/mathematical-biology/harsh-environment","tags":"","img":"/assets/images/harsh-environment.webp","id":20},{"layout":"page","title":"Dynamic bifurcations with heterogeneity","lesson_number":120,"thumbnail":"/assets/images/heterogeneousGiererMeinhardt.webp","extract":"Isolated patterns and moving spikes","equation":"$\\pd{u}{t}=\\nabla^2 u+a+G(x)+\\frac{u^2}{v}-[b+H(x)]u,$ $\\pd{v}{t}=D\\nabla^2v+ u^2-cv$","body":"This is a brief example of messy boundary conditions and spatial heterogeneity inducing complex dynamical behaviours. We consider a heterogeneous version of the [Gierer–Meinhardt](/mathematical-biology/gierer-meinhardt) model:\n\n$$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u+a+G(x)+\\frac{u^2}{v}-(b+H(x))u,\\\\ \\pd{v}{t}&=D\\nabla^2v+ u^2-cv,\\end{aligned}$$\n\nwhere we will vary the domain and boundary conditions, as well as the functions $G,H$, in the examples below. \n\n* Load the [interactive simulation](/sim/?preset=GMHeterogeneous2D)\n\n* The simulation starts by taking homogeneous Dirichlet boundary conditions for $u$, and homogeneous Neumann boundary conditions for $v$. Despite an initially uniform solution, these boundary conditions are sufficient to perturb the equilibrium to form a patterned state.\n\n* This simulation sets $G = Ax/L$ and $H = Bx/L$, so that taking nonzero values of $A$ and $B$ will lead to spatially heterogeneous forcing. Try setting $A=-1$ or $B=5$ to observe how this leads to size and wavelength differences across the domain.\n\n* With nonzero values of $A$ or $B$, restarting the simulation by pressing {{ layout.erase }} can lead to transient local oscillations and somewhat different selection of where spots will appear.\n\n# 1D bifurcations\n\nThese systems are somewhat simpler to understand in 1D spatial domains, where we can isolate some aspects of their behaviour analytically. In particular, it is known that spike solutions in 1D can move along gradients in spatial heterogeneity, and that this can induce instabilities leading to periodic spike patterns which we now explore.\n\n* First consider [this simulation](/sim/?preset=GMHeterogeneousOscillationsMixedBCs) using the same mixed boundary conditions above, with $G=0$ and $H=Bx/L$. Spikes form across the domain at different amplitudes. The rightmost one undergoes a Hopf instability leading to oscillations in its amplitude, which eventually die out as it moves to the left. Eventually the leftmost spike becomes unstable, making room for the others to move further left. This eventually leads to enough room at the right for a new spike to emerge, which again undergoes a brief oscillatory period before settling down. This behaviour repeats indefinitely. The oscillations at the right, and the boundary spike on the left which does not move, are not terribly relevant for the movement or creation/anhillation of spikes. These are just artifacts of our particular choice of heterogeneity and kinetics.\n\n* We can get rid of these artifacts in the following way. We use Dirichlet conditions to introduce a flux of the inhibitor $v$ at the boundaries to dampen these spike oscillations and remove the leftmost boundary spike. We set $v=2$ at the boundaries (retaining the $u=0$ condition from the previous simulation) in [this simulation](/sim/?preset=GMHeterogeneousOscillationsDirichletBCs). This more clearly localises the spike movement dynamics. If you change the value of $v$ at the boundaries from 2 to 1, you can observe the boundary spikes from the previous simulation returning (though reducing it much below 1 can lead to numerical issues due to the dependence of the equation for $\\pd{u}{t}$ on $1/v$).\n\n","url":"/mathematical-biology/heterogeneous-dynamics","tags":"","img":"/assets/images/heterogeneousGiererMeinhardt.webp","id":21},{"layout":"page","title":"Keller–Segel chemotaxis","lesson_number":90,"thumbnail":"/assets/images/KellerSegel.webp","extract":"Slime moulds and cell movement","equation":"$\\pd{u}{t}=\\nabla^2 u-\\vnabla \\cdot(\\chi(u)\\vnabla v)+f_u(u)$, $\\pd{v}{t}=D\\nabla^2v+ f_v(u,v)$","body":"We now consider [Keller–Segel models of chemotaxis](https://en.wikipedia.org/wiki/Chemotaxis#Mathematical_models) of the form\n\n$$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u-\\vnabla \\cdot(\\chi(u)\\nabla v)+f_u(u),\\\\ \\pd{v}{t}&=D\\nabla^2v+ f_v(u,v),\\end{aligned}$$\n\nwhere we take \n\n$$\\begin{aligned}\\chi&=\\displaystyle\\frac{cu}{1+u^2},\\\\f_u(u)&=u(1-u),\\\\f_v(u,v) &= u-av.\\end{aligned}$$\n\n* Load the [interactive simulation](/sim/?preset=KellerSegel) \n\n* The initial condition condition is a small random initial population, which eventually grows towards the homogeneous equilibrium of $u=1$, $v=1/a$, but will undergo pattern formation as it nears this equilibrium. \n\n* Try changing the values of $D$, $c$, and $a$ and then pressing {{ layout.restart }} to restart the simulation. Importantly, this system will have some hysteresis in that patterns may appear differently depending on where they evolved from, and when you change the parameters (for example, if you restart the simulation or just change the parameters and let it evolve from one state to another). The colour bars are fixed so that taking $c=10$ leads to patterns which saturate the colour scale.\n\n* Linear instability analysis predicts a pattern-forming instability for parameters satisfying \n\n    $$2\\sqrt{aD} < \\frac{c}{2}-D-a.$$\n\n    Test this inequality by varying parameters (for example, around $c = 3.3$ to $c=3.6$), leaving the other parameters as they are.\n","url":"/mathematical-biology/keller-segel","tags":"","img":"/assets/images/KellerSegel.webp","id":22},{"layout":"page","title":"Schnakenberg pattern formation","lesson_number":50,"thumbnail":"/assets/images/Schnakenberg.webp","extract":"Spots and stripes","equation":"$\\pd{u}{t}=\\nabla^2 u+a-u+u^2v$, $\\pd{v}{t}=D\\nabla^2v+ b-u^2v$","body":"Next we'll consider a classical reaction–diffusion system which forms [Turing patterns](https://en.wikipedia.org/wiki/Turing_pattern),\n\n$$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u+a-u+u^2v,\\\\ \\pd{v}{t}&=D\\nabla^2v+ b-u^2v,\\end{aligned}$$\n\nwhere we need $D>1$ to form patterns, and typically take $a,b>0$.\n\n* Load the [interactive simulation](/sim/?preset=Schnakenberg). \n\n* Click within the box to visualise a pulse of a population, which will then spread out as a planar wave leaving patterns behind it. \n\n* You can change the diffusion coefficients to effectively change the size of the domain (the diffusion coefficients will scale like $1/L^2$ where $L$ is the domain size, so decreasing both diffusion coefficients by $100$ will effectively simulate a domain $10$ times larger). As the patterns have approximately fixed wavelengths, this should lead to a different number of pattern elements.\n\n* With $D=100$, the system forms spot-like patterns. If you reduce to $D=30$, instead stripe-like patterns will be formed. \n\n* The homogeneous equilibrium can undergo Hopf bifurcations for small values of $1 > b > a \\geq 0$. In this regime, one can find Turing patterns, homogeneous oscillations, and complex spatiotemporal interactions of Turing and Hopf instabilities. One example is [this simulation](/sim/?preset=SchnakenbergHopf), but you can find others by tweaking the parameters.\n\n* Check out [this simulation](/sim/?preset=SchnakenbergGrowingDisk) for a crude implementation of the Schnakenberg system on a growing domain with Dirichlet boundary conditions.\n","url":"/mathematical-biology/schnakenberg","tags":"","img":"/assets/images/Schnakenberg.webp","id":23},{"layout":"page","title":"Logistic travelling waves","lesson_number":10,"thumbnail":"/assets/images/travelling-waves.webp","extract":"A classic example","equation":"$\\pd{u}{t}=\\nabla^2 u+ru\\left(1-\\frac{u}{K}\\right)$<br />with periodic boundary conditions","body":"Next we'll consider a classical reaction–diffusion equation, with a logistic nonlinearity. This is often referred to as the [Fisher–KPP equation](https://en.wikipedia.org/wiki/Fisher%27s_equation),\n\n$$\\pd{u}{t}=\\nabla^2 u+ru\\left(1-\\frac{u}{K}\\right),$$\n\nwith periodic boundary conditions.\n\n1. Load the [interactive simulation](/sim/?preset=travellingWave). \n\n1. Click within the box to visualise a 'line' of a population, which will then spread out as a planar wave. \n\n1. Explore different parameters in this model, namely $D$, $r$, and $K$. \n \n1. Does the wave speed, $c$, approximately follow the scaling law derived via linearisation of the wavefront (that is, $c \\propto \\sqrt{rD}$)? One interesting experiment to try is to see what happens if you simultaneously decrease $r$ and increase $D$ (or vice versa). This should have (approximately) the same effective wave speed, but the profile will be different as you have effectively changed the time and space scales in opposite directions.\n\n1. Does the value of the carrying capacity, $K$, matter for the speed of the wave? Or the profile?\n\n1. Next change the brush type to a circle and explore how circular waves travel. These are similar to the planar (effectively 1D) waves above, but their speed will be slightly different as the curvature of these wave fronts will influence their speed.\n\n1. You can also explore this kind of wave in a [1D model](/sim/?preset=travellingWave1D). You can press {{ layout.erase }} to reset the simulation as you change parameters.\n","url":"/mathematical-biology/travelling-wave","tags":"","img":"/assets/images/travelling-waves.webp","id":24},{"layout":"page","title":"Banded vegetation patterns","lesson_number":130,"thumbnail":"/assets/images/VegetationPatterns.webp","extract":"Stripes moving towards water","equation":"$\\pd{w}{t} = a-w -wn^2+v\\pd{w}{x} + \\nabla^2w$, $\\pd{n}{t} = wn^2 - mn + \\nabla^2n$","body":"Here we look at a model of vegetation patterning known as the [Klasumeier model](https://www.science.org/doi/full/10.1126/science.284.5421.1826), written in terms of water $w$ and plant biomass $n$.\n\n$$\\begin{aligned}\\pd{w}{t} &= a-w -wn^2+v\\pd{w}{x} + \\nabla^2w,\\\\ \\pd{n}{t} &= wn^2 - mn + \\nabla^2n\\end{aligned}$$\n\n* Load the [interactive simulation](/sim/?preset=KlausmeierModel). Note that this model always has a plant-extinction state being stable.\n\n* The simulation starts in a parameter regime where pure stripes (regular patterns) of plants are favoured over time. If you instead set $a=0.4$, $m=0.4$, the environment will be much harsher, leading to less regular patterns. However, this also makes the extinction state more stable, so you may have to brush sufficient initial data to overcome this Allee-like effect.\n\n# Localised solutions\n\nSimilarly to the [localised patterns in Swift-Hohenberg](/nonlinear-physics/swift-hohenberg), Dan Hill has provided examples of dihedrally symmetric localised patterns in this model.\n\nYou can find initial conditions that simulate such patterns at [this interactive simulation](/sim/?preset=LocalisedVegetation), and more information about the rigorous theory underlying them in [this paper](https://arxiv.org/abs/2309.02956).\n","url":"/mathematical-biology/vegetation-patterns","tags":"","img":"/assets/images/VegetationPatterns.webp","id":25},{"layout":"page","title":"Pattern formation & advection","lesson_number":70,"thumbnail":"/assets/images/GrayScottAdvection.webp","extract":"Moving patterns","equation":null,"body":"Each of the examples on this page will be a variation of a previous example incorporating one or more linear advection terms. This will introduce a velocity parameter $V$ and, in the unidrectional case, a direction $\\theta$.\n\n## Gliders swimming upstream\n\n* We start with the glider example from the [Gray–Scott](/nonlinear-physics/gray-scott) model, and add an advection term in the $u$ equation to get an example of [drifting gliders](/sim/?preset=GrayScottGlidersAdvecting). \n\n* The boundaries here will destroy the patterns as mass will be lost at boundaries orthogonal to the flow. Decreasing $V$ will allow the moving spots to survive longer, whereas increasing it will lead to wave-selection.\n\n* As discussed in its own page, this model has a huge range of behaviours, and these are all likely influenced by advection.\n\n## Localised Swift–Hohenberg swiftly moving\n\n* We next consider the localised solutions from the [Swift–Hohenberg equation](/nonlinear-physics), and consider two cases of moving patterns under advection. The first is [unidirectional motion](/sim/?preset=swiftHohenbergLocalisedDirectedAdvection) at an angle $\\theta$, and the second is [rotational advection](/sim/?preset=swiftHohenbergLocalisedRotationalAdvection).\n\n* In both cases, changing $V$ impacts the velocity of this movement. Note that if $V$ becomes too large in the rotational case, the pattern can generate structures which misbehave at the boundaries (as these will interact with advection in odd ways). In particular, the rotating velocity field which is advecting $u$ is itself not periodic.\n\n* Changing $P$ and restarting the simulation allows you to explore how these different localised solutions change their structure under advection.\n","url":"/nonlinear-physics/advecting-patterns","tags":"","img":"/assets/images/GrayScottAdvection.webp","id":26},{"layout":"page","title":"Viscous Burgers' equation","lesson_number":60,"thumbnail":"/assets/images/BurgersEquation.webp","extract":"Nonlinear waves","equation":"$\\pd{u}{t} =-u\\pd{u}{x}+\\varepsilon \\pdd{u}{x}$","body":"(Viscous) [Burgers' equation](https://en.wikipedia.org/wiki/Burgers%27_equation):\n\n$$\\pd{u}{t} =-u\\pd{u}{x}+\\varepsilon \\pdd{u}{x}.$$\n\n* Load the [interactive simulation](/sim/?preset=BurgersEquation). Locally in space, the wave is translating to the right with a speed $u$, and hence larger initial amplitudes have greater speed.\n\n* In the limit of $\\varepsilon \\to 0$, the solution forms discontinuous shock solutions. These can be approximated with small $\\varepsilon$ (as these solutions will be smooth), though advection will cause numerical difficulties (e.g. oscillations near the front of the wave). Nonzero $\\varepsilon$ leads to some loss of amplitude/height of the wave, but otherwise roughly captures the limiting shock behaviour as long as it is sufficiently small.\n","url":"/nonlinear-physics/burgers","tags":"","img":"/assets/images/BurgersEquation.webp","id":27},{"layout":"page","title":"Cahn–Hilliard equation","lesson_number":30,"thumbnail":"/assets/images/CahnHilliard.webp","extract":"Phase separation","equation":"$\\pd{u}{t}=\\nabla^2 (F(u)-g\\nabla^2u)+f(u)$","body":"We now study the [Cahn–Hilliard equation](https://en.wikipedia.org/wiki/Cahn%E2%80%93Hilliard_equation) with an extra reaction term,\n\n$$\\pd{u}{t} = r\\nabla^2 (u^3-u-g\\nabla^2u)+u-u^3,$$\n\nwith periodic boundary conditions.\n\n* Load the [interactive simulation](/sim/?preset=CahnHilliard) \n\n* The initial condition is taken to be random noise at the level of the discretised system, and the initial timescale, given by $r$, is small. Increase $r$ by one or two orders of magnitude to speed up the simulation, and observe the coarsening process as described [here](https://people.maths.ox.ac.uk/trefethen/pdectb/cahn2.pdf).\n","url":"/nonlinear-physics/cahn-hilliard","tags":"","img":"/assets/images/CahnHilliard.webp","id":28},{"layout":"page","title":"The Gray–Scott model","lesson_number":50,"thumbnail":"/assets/images/GrayScott.webp","extract":"Complex reaction–diffusion","equation":"$\\pd{u}{t}=\\nabla^2 u+u^2v - (a+b)u$, $\\pd{v}{t}=D\\nabla^2v -u^2v + a(1 - v)$","body":"A reaction–diffusion system heavily studied for its complex dynamics is the Gray–Scott system, given by\n\n$$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u+u^2v - (a+b)u,\\\\ \\pd{v}{t}&=D\\nabla^2v-u^2v + a(1 - v),\\end{aligned}$$\n\nwhere we take $D=2$ and only vary $a,b>0$. This model has a [wide range of behaviours](http://www.mrob.com/pub/comp/xmorphia/index.html), shown in [another WebGL simulator](https://pmneila.github.io/jsexp/grayscott/) that partially inspired VisualPDE.\n\n* Load the [interactive simulation](/sim/?preset=GrayScott) to explore the system.\n  \n* A [famous paper](https://arxiv.org/abs/patt-sol/9304003) on this model explored a range of the parameters $a$ and $b$ to classify different behaviours, and many people have hence made these parameters depend linearly on $x$ and $t$ to see all of this behaviour at once. [This simulation](/sim/?preset=GrayScottPearsonClassification) explores this approach, with $a$ depending on $y$ in the range $a \\in [0,0.07]$ and $b$ depending on $x$ in the range $b \\in [0.02, 0.068]$.\n\n* Building from the previous simulation, we can rescale the heterogeneity to still be monotonic, but to use up more of the domain to see different dynamical regimes. We explore this in [this simulation](/sim/?preset=GrayScottPearsonClassificationRescaled), where we also plot the variable $v$ instead by default (you can click on {{ layout.views }} to change this to plot $u$ instead). Interestingly, the value of $D=2$ used gives a very rich parameter space, whereas making $D$ smaller reduces the regions of patterned behaviour, and taking $D$ larger increases it at the cost of making things more stationary and more spot-like for most of the parameter domain. Interestingly, when $D=1$ the system no longer supports stationary patterns, but does exhibit waves similar to the spiral waves in the equal-diffusion case of the [cyclic competition models](/mathematical-biology/cyclic-competition).\n\nBelow we've listed some parameter combinations that give rise to different and interesting behaviours. One of our favourites is the [moving spots simulation](/sim/?preset=GrayScottGliders), which exhibits spots bobbing around. If you initiate this motion and then increase $b$ slowly to about $b=0.56$, the spots become sparse and start exhibiting strange diversions in their motions.\n\n| $a$  | $b$  |  Description |\n|---|---|---|\n| 0.037 | 0.06  |  Labyrinthine |\n| 0.03  | 0.062 |  Spots |\n| 0.025 | 0.06  |  Pulsating spots |\n| 0.078 | 0.061 | Worms |\n| 0.039 | 0.058 | Holes |\n| 0.026 | 0.051 | Spatiotemporal chaos |\n| 0.034 | 0.056 | Intermittent chaos/holes |\n| 0.014 | 0.054 | Moving spots (glider-like) |\n| 0.018 | 0.051 | Small waves |\n| 0.014 | 0.045 | Big waves |\n| 0.062 | 0.061 | U-skate world |\n","url":"/nonlinear-physics/gray-scott","tags":"","img":"/assets/images/GrayScott.webp","id":29},{"layout":"page","title":"Solitons in the Korteweg–De Vries equation","lesson_number":80,"thumbnail":"/assets/images/KdV.webp","extract":"Solitary movement through each other","equation":"$\\pd{\\phi}{t}=-\\pdn{\\phi}{x}{3}-6\\phi \\pd{\\phi}{x}$","body":"Here is an implementation of the [Korteweg–De Vries (KdV) equation](https://en.wikipedia.org/wiki/Korteweg%E2%80%93De_Vries_equation) given by\n\n$$\\pd{\\phi}{t}=-\\pdn{\\phi}{x}{3}-6\\phi \\pd{\\phi}{x},$$\n\nwhich is a very simple model of solitons, as described at the bottom of the page for the [nonlinear Schrödinger equation](/nonlinear-physics/nls-cgl).\n\nThe [interactive simulation](/sim/?preset=KdV) starts with two solitons of different amplitudes and speeds, with the larger one moving more quickly and hence overtaking the smaller one at first. While they occupy the same space, these solitons cannot be clearly distinguished as their ampltiudes locally add together, but as the faster soliton moves more quickly it eventually separates from the slower soliton, and neither speed nor amplitude of either soliton is changed.\n\nThis example was helpfully constructed by [Paul Sutcliffe](https://www.durham.ac.uk/staff/p-m-sutcliffe/).\n","url":"/nonlinear-physics/kdv","tags":"","img":"/assets/images/KdV.webp","id":30},{"layout":"page","title":"Kuramoto–Sivashinsky equation","lesson_number":40,"thumbnail":"/assets/images/KuramotoSivashinsky.webp","extract":"Phase separation","equation":"$\\pd{u}{t}=-\\nabla^2u-\\nabla^4u-|\\vnabla u|^2 $","body":"We now study the [Kuramoto–Sivashinsky equation](https://en.wikipedia.org/wiki/Kuramoto%E2%80%93Sivashinsky_equation),\n\n$$\\pd{u}{t} = -\\nabla^2u-\\nabla^4u-|\\nabla u|^2,$$\n\nwith periodic boundary conditions.\n\n* Load the [interactive simulation](/sim/?preset=KuramotoSivashinsky). If you perturb the solution, it should devolve into a kind of spatiotemporal chaos of oscillation and movement. Importantly, the patterns which emerge have a certain set of coherent wavelengths, which suggests that the dynamics is that of finite-dimensional chaos, rather than fully turbulent mixing.\n\n## Numerical notes\n\nThe equation above is far from the cross-diffusion kind of system our solver is built for. However, using the product rule and an algebraic substitution, we can write it as:\n\n$$\\begin{align} \n\\pd{u}{t}& = -\\vnabla \\cdot [ (1+u)\\vnabla u + \\vnabla v]+uv-au, \\\\\n v& = \\nabla^2 u,\n\\end{align}$$\n\nwhere $a$ is a damping coefficient used to help stabilise the solver. For $a=0$, this is exactly the fourth-order equation above.\n","url":"/nonlinear-physics/kuramoto-sivashinsky","tags":"","img":"/assets/images/KuramotoSivashinsky.webp","id":31},{"layout":"page","title":"Complex Ginzburg–Landau","lesson_number":20,"thumbnail":"/assets/images/complexGinzburgLandau.webp","extract":"A world of complexity","equation":"$\\pd{\\psi}{t}=(D_r+\\i D_i)\\nabla^2 \\psi+(a_r+\\i a_i)\\psi+(b_r+\\i b_i)\\psi|\\psi|^2$","body":"Here is an implementation of a [(complex) Ginzburg-Landau equation](https://arxiv.org/abs/cond-mat/0106115) given by\n\n$$\\pd{\\psi}{t}=(D_r+\\i D_i)\\nabla^2 \\psi+(a_r+\\i a_i)\\psi+(b_r+\\i b_i)\\psi|\\psi|^2,$$\n\nwhere we typically need $b_r,D_r \\geq 0$ for solutions to exist.\n\n* Load the [interactive simulation](/sim/?preset=complexGinzburgLandau) \n\n* Change the parameter $b_i$ to see a wide range of interesting behaviours. The values $b_i=-5, -1, 0, 1, 2$ all give distinct dynamical regimes, for example.\n\n# Numerical notes\n\nAs in the [Schrödinger equation](/basic-pdes/stabilised-schrodinger), we have to separate out the real and imaginary parts of $\\psi$ to simulate it. We write $\\psi=u+\\i v$ to find\n\n$$\\begin{aligned}\\pd{u}{t}&=D_r\\nabla^2u-D_i\\nabla^2 v+a_ru-a_iv+(b_ru-b_iv)(u^2+v^2),\\\\ \n\\pd{v}{t} &= D_i\\nabla^2 u+D_r\\nabla^2v+a_rv+a_iu+(b_rv+b_iu)(u^2+v^2).\n\\end{aligned}$$\n\n# Solitons \n\nThe [nonlinear Schrödinger equation](https://en.wikipedia.org/wiki/Nonlinear_Schr%C3%B6dinger_equation) is a special case of this model, typically written as\n\n$$\n\\i\\pd{\\psi}{t}=-\\nabla^2 \\psi+\\kappa\\psi|\\psi|^2.\n$$\n\nThe sign of $\\kappa$ determines if the system is 'focusing' or 'defocusing' and, hence, if we can observe dark or bright [solitons](https://en.wikipedia.org/wiki/Soliton).\n\n[This simulation](/sim/?preset=NonlinearSchrodingerSoliton) is an example of a soliton moving to the right at a speed $c$, determined entirely by the initial condition. If you change the value of $\\kappa$ and restart the simulation, you can observe different behaviours. For example, $\\kappa=-1$ gives a defocusing equation, for which the soliton eventually breaks apart into something resembling a moving [Jacobi elliptic function](https://en.wikipedia.org/wiki/Jacobi_elliptic_functions). We note that the simulator used does not preserve the conserved quantities in this model, so may give spurious or incorrect solutions for some parameters or initial conditions.\n\n# Coupled Ginzburg–Landau systems\n\nWe can also consider generalisations of coupled systems, particularly an optics formalism known as 'cross-phase modulation'. Models of this form with cubic nonlinearities look like\n\n$$\\begin{aligned}\\pd{\\psi_1}{t}&=(D_{1r}+\\i D_{1i})\\nabla^2 \\psi_1+(a_{1r}+\\i a_{1i})\\psi_1+(b_{1r}+\\i b_{1i})\\psi_1\\left( |\\psi_1|^2+\\alpha_1|\\psi_2|^2 \\right),\\\\ \\pd{\\psi_2}{t}&=(D_{2r}+\\i D_{2i})\\nabla^2 \\psi_2+(a_{2r}+\\i a_{2i})\\psi_2+(b_{2r}+\\i b_{2i})\\psi_2\\left( |\\psi_2|^2+\\alpha_2|\\psi_1|^2 \\right). \\end{aligned}$$\n\nThe parameters $\\alpha_1$ and $\\alpha_2$ influence how much the two wavefunctions interact with one another. If these interactions are strong, either species can be driven to extinction, as described in [this paper on amplitude death](https://arxiv.org/abs/1803.02147). In intermediate cases, the two wavefunctions may coexist, leading to dynamics where the wavefunctions are nonzero only in separate subsets of the domain, as described in [this paper on saturable nonlinearities](https://doi.org/10.1016/j.aop.2018.07.003). [This simulation](/sim/?preset=CoupledCGL) explores these separation dynamics, where the wavefunctions are locally chaotic but their boundaries are determined by where the other wavefunction is nonzero. You can toggle between the amplitudes of each wavefunction by clicking {{ layout.views }} and selecting one wavefunction or the other.\n","url":"/nonlinear-physics/nls-cgl","tags":"","img":"/assets/images/complexGinzburgLandau.webp","id":32},{"layout":"page","title":"Bending in nonlinear beams","lesson_number":110,"thumbnail":"/assets/images/nonlinear-beam.webp","extract":"Exploring state-dependent stiffness","equation":"$\\pd{y}{t}=-\\pdd{}{x}[E(y)\\pdd{y}{x}]$","body":"In the absence of inertia, the dimensionless equation of motion for a beam with a small deflection $y(x,t)$ is\n\n$$\\begin{aligned}\\pd{y}{t}=-\\pdd{}{x}\\left(E\\pdd{y}{x}\\right),\\end{aligned}$$\n\nwhere $E$ represents the stiffness of beam, or how difficult it is to bend. Traditionally, this stiffness is taken to be a constant or perhaps to depend on the position $x$.\n\nIn the simulation below, we consider a beam with a stiffness that depends on the local curvature, so that\n\n$$\\begin{aligned}E = E\\left(\\pdd{y}{x}\\right) = E^\\star + \\Delta_E\\frac{1+\\tanh{(\\pdd{y}{x}/\\epsilon})}{2} \\end{aligned}$$\n\nfor baseline stiffness $E^\\star$, stiffness change $\\Delta_E$, and sensitivity $\\epsilon$. \n\nWe can play with $\\Delta_E$ using the slider below. The minimum value corresponds to a beam with constant stiffness, while the maximum value corresponds to a beam with a stiffness that depends strongly on the curvature. A quick exploration highlights that the dynamics of the beam depend significantly on the differential stiffness.\n\n<p style=\"text-align:center;\"><vpde-slider\n    iframe=\"sim\"\n    name=\"Delta_E\"\n    label=\"$\\Delta_E$: \"\n    min=\"0\"\n    max=\"24\"\n    value=\"0\"\n    step=\"0.1\"\n    min-label=\"$0$\"\n    max-label=\"$24$\"\n    host=\"/\"\n    ></vpde-slider></p>\n\n<iframe id=\"sim\" class=\"sim\" src=\"/sim/?preset=differentialStiffness&story&sf=1\" frameborder=\"0\" loading=\"lazy\"></iframe>\n\nPlay with this example in more detail in [this simulation](/sim/?preset=differentialStiffness).\n\n<!-- For more details on this topic, take a look at [this paper](https://arxiv.org/abs/2204.13820). -->\n","url":"/nonlinear-physics/nonlinear-beams","tags":"","img":"/assets/images/nonlinear-beam.webp","id":33},{"layout":"page","title":"The Perona–Malik equation","lesson_number":90,"thumbnail":"/assets/images/PeronaMalik.webp","extract":"Image denoising via nonlinear anisotropic diffusion","equation":"$\\pd{u}{t}=\\vnabla \\cdot \\left (\\mathrm{e}^{-D |\\vnabla u|^2}\\vnabla u\\right) $","body":"Here is an implementation of the [Perona–Malik equation](https://en.wikipedia.org/wiki/Anisotropic_diffusion) given by\n\n$$\\pd{u}{t}=\\vnabla \\cdot \\left (\\mathrm{e}^{-D |\\vnabla u|^2}\\vnabla u\\right),$$\n\nwhich is used for image denoising. In particular, the nonlinear anisotropic diffusion causes sharp gradients to sharpen, and smooths out more shallow noisy regions.\n\nThis [interactive simulation](/sim/?preset=PeronaMalik) starts with some text from a quote by [Bernt Øksendal](https://en.wikipedia.org/wiki/Bernt_%C3%98ksendal), with some noise added on top of it. Pressing play causes this initial condition to sharpen, making the text clearer. You can pause the simulation and use the brush to add more noise to the image, and play with the parameter $D$ to see how it influences the ability to denoise the text. \n\nYou can change the image to one of a noisy [aperiodic tiling](https://en.wikipedia.org/wiki/Einstein_problem) by modifying the initial conditions to use $I_S$ rather than $I_T$, and then restarting the simulation. Other images will also work, but these may need some fine-tuning to have this algorithm improve their quality. In particular, finer meshes may be needed to preserve small edges.\n","url":"/nonlinear-physics/perona-malik","tags":"","img":"/assets/images/PeronaMalik.webp","id":34},{"layout":"page","title":"Swift–Hohenberg equation","lesson_number":10,"thumbnail":"/assets/images/swiftHohenberg.webp","extract":"Simplistic pattern formation","equation":"$\\pd{u}{t}=ru - (1+D\\nabla^2)^2u+au^2+bu^3+cu^5$ with periodic boundary conditions","body":"Swift–Hohenberg equation:\n\n$$\\pd{u}{t} = ru - (k_c^2+\\nabla^2)^2u+au^2+bu^3+cu^5,$$\n\nwith periodic boundary conditions, and we need $c<0$ (or $b<0$ if $c=0$) for stability.\n\n* Load the [interactive simulation](/sim/?preset=swiftHohenberg). \n\n* Depending on the signs of $r$, $a$, and $b$, this system can support a wide range of patterns and dynamical behaviour. One important class of behaviour is subcriticality, where the dynamics of the system can become quite complicated and include things like multistability of homogeneous and patterned states, and localised solutions as described below.\n\n# Localised solutions\n\nWhen $r<0$, $a>0$, and $b<0$, the system can be in a subcritical regime that supports both stable patterned states and the stable homogeneous state $u=0$. Specific initial conditions can induce localised patterns, which fall off to the background of $u=0$ throughout most of the domain. [Here](/sim/?preset=swiftHohenbergLocalised) is one example, where you can change the initial conditions or click to induce localised structures throughout the domain, but only if they are sufficiently far from the homogeneous state (as otherwise perturbations will decay back to it).\n\nThis example is based on this [paper by Dan Hill and collaborators](https://iopscience.iop.org/article/10.1088/1361-6544/acc508) which studies symmetric localised solutions of the Swift-Hohenberg equation. \n* The default initial condition picks out a solution with $D_4$ symmetry. \n* If you change the parameter $P$ to the value $2$ and then press {{ layout.erase }}, this will replace the initial condition with one that evolves to a hexagonal solution ($D_6$ symmetry). \n* If you set $P=3$ and press {{ layout.erase }}, this will replace the initial condition with one that evolves to a $D_{12}$-symmetric solution.\n","url":"/nonlinear-physics/swift-hohenberg","tags":"","img":"/assets/images/swiftHohenberg.webp","id":35},{"layout":"page","title":"Hyperbolic Reaction-Diffusion Systems","lesson_number":100,"thumbnail":"/assets/images/FHNTuringWave.webp","extract":"Turing-Wave instabilities","equation":"$\\tau\\pdd{u}{t}+\\pd{u}{t}=D_u\\nabla^2 u+f(u,v)$, $\\tau\\pdd{v}{t}+\\pd{v}{t}=D_v\\nabla^2v+ g(u,v)$","body":"One can show that two–species reaction–diffusion systems can only ever have Turing–like instabilities with real growth rates. In contrast, hyperbolic reaction–diffusion systems (or systems with more than two species) allow for Turing–Wave (or sometimes Wave or Turing–Hopf) instabilities. Such instabilities lead to spatial eigenfunctions that grow and oscillate, typically giving rise to spatiotemporal dynamics. Here we consider a hyperbolic version of the [Brusselator](/mathematical-biology/brusselator) given by\n\n$$\\begin{aligned}\\tau\\pdd{u}{t}+\\pd{u}{t}&=D_u\\nabla^2 u+a-(b+1)u+u^2v,\\\\ \\tau\\pdd{v}{t}+\\pd{v}{t}&=D_v\\nabla^2v+ bu-u^2v,\\end{aligned}$$\n\nwhere there are two new terms proportional to $\\tau$. The normal Turing instabilities will occur for $D_u<D_v$, but new Turing–Wave instabilities may occur for $D_u>D_v$, so we set $D_u=D=2$ and $D_v=1$.\n\n* In a [one-dimensional simulation](/sim/?preset=BrusselatorTuringWave1D), an initial cosine perturbation on a small domain leads to an oscillating cosine, which is what linear theory would predict. The system loses this instability as $\\tau$ is decreased to $0.1$ or below, with a decaying oscillation amplitude for intermediate values.\n\n* On a larger domain, a [two-dimensional simulation](/sim/?preset=BrusselatorTuringWave2D) exhibits a variety of transient dynamics depending on exactly how the uniform equilibrium is perturbed, culminating in `wave–like' spatiotemporal behaviour. Again decreasing $\\tau$ or increasing $D$ will reduce the effect of the instability, decreasing the amplitude of the solution.\n\n* Here is a [different 1D example](/sim/?preset=TuringWaveFHN) and the [same system in 2D](/sim/?preset=TuringWaveFHN2D) based on the [FitzHugh-Nagumo system](/mathematical-biology/fitzhugh-nagumo). \n\nFor more details on such systems and their generalisations, take a look at [this paper](https://arxiv.org/abs/2204.13820).\n","url":"/nonlinear-physics/turing-wave","tags":"","img":"/assets/images/FHNTuringWave.webp","id":36},{"layout":"page","title":"Validating VisualPDE","lesson_number":10,"thumbnail":"/assets/images/ValidatingVisualPDE.webp","extract":"VisualPDE versus exact solutions","body":"When implementing VisualPDE, we were somewhat sceptical of browser-based computation and questioned if it could be relied upon, especially in the context of PDEs. Here we showcase some of the examples that have convinced us of VisualPDE's surprising accuracy.\n\n### The heat equation\n\nPerhaps the simplest equation that VisualPDE can solve is the heat equation, as explored in [this example](/basic-pdes/heat-equation). With $T(x,t)$ as the temperature in an infinite domain, the heat equation\n\n$$\\pd{T}{t}=D_T \\nabla^2 T$$\n\nadmits solutions of the Gaussian form \n\n$$T(x,t) = \\frac{1}{\\sqrt{t}}e^{-\\frac{x^2}{4t}}.$$\n\nHence, if the initial data is Gaussian, the solution evolves as a Gaussian. We can simulate this scenario in VisualPDE by truncating the infinite domain (applying Neumann boundary conditions) and specifying initial data of this form. Note that the exponential solution decays rapidly to zero far away from the mean of the Gaussian, so that the finite-domain approximation is a very good one.\n\n[This simulation](/sim/?preset=heatEquation1DValidity) is set up to do just that. To check if the numerical solution is accurate, we've plotted the analytical solution (thin curve) on top of the numerical one (thick curve). As you might have hoped, VisualPDE does an excellent job of capturing the spatiotemporal evolution of the exact solution. This is especially remarkable as this particular simulation uses a fairly coarse spatial discretisation and a Forward Euler timestepping scheme. \n\nIf you turn on **Auto snap** in the Views menu {{ layout.views }} and wait until $t=2\\times 10^{3}$, you'll actually start to see the plotting of the analytical solution break down due to the implementation of the exponential function on your GPU, and the two solutions begin to separate.\n\n### The wave equation\n\nIn our [first look at the wave equation](/basic-pdes/wave-equation), we saw how we can cast this hyperbolic PDE in an approximate parabolic form that can be solved by VisualPDE. The true wave equation in 1D, written as\n\n$$\\pdd{u}{t}=D \\nabla^2 u$$\n\nfor amplitude $u(x,t)$, has simple solutions if $u_t=0$ initially, composed only of leftward and rightward travelling waves. The exact form can be found easily using [d'Alembert's solution](https://mathworld.wolfram.com/dAlembertsSolution.html).\n\nIn [this simulation](/sim/?preset=waveEquation1DValidity), we numerically solve our close approximation to the wave equation with stationary initial data, plotting the exact solution on top. As before, we observe very good agreement between the two solutions. As expected, this agreement lessens over time as the effects of our approximation accumulate. Reducing the regularisation parameter $C$ improves this agreement, but setting it to zero causes spurious oscillations to eventually emerge in the numerical solution.\n\n### A conservative system\n\nAs VisualPDE is designed to solve a broad range of PDEs, it often fails to precisely capture conserved quantities in special systems. The [Schrödinger equation](https://en.wikipedia.org/wiki/Schrödinger_equation) is a good example of this, explored in [this example](/basic_pdes/stabilised-schrodinger). \n\nIn [this simulation](/sim/?preset=stabilizedSchrodinger1DValidity), try changing the timestepping scheme and restarting the simulation. As might be expected, higher order schemes like the midpoint method and Runge-Kutta 4 do a better job of preserving the total integral of the system (which should be unity) than the (default) Forward Euler method. To get a handle on this quantitatively, we've enabled **Auto pause** in the **Timestepping** menu of **Settings** {{ layout.settings }}, which stops the simulation at a specified time so that you can compare the values obtained with each of the numerical schemes.","url":"/numerical-methods/validating-VisualPDE","tags":"","img":"/assets/images/ValidatingVisualPDE.webp","id":37},{"layout":"page","title":"FAQs","lesson_number":15,"thumbnail":"/assets/images/question-marks.webp","extract":"Unsure about something? Help is at hand","body":"<form id=\"pageSearchForm\"\nonSubmit=\"page_search(document.getElementById('pageSearchInput').value); return false;\"\n>\n<p>\n    <div id=\"pageSearchBar\">\n    <input\n      type=\"text\"\n      id=\"pageSearchInput\"\n      name=\"q\"\n      maxlength=\"255\"\n      value=\"\"\n      placeholder=\"Search this page\"\n      onfocus=\"document.getElementById('pageSearchForm').onsubmit();window.gtag?.('event', 'page_search');\"\n      oninput=\"document.getElementById('pageSearchForm').onsubmit();\"\n      />\n      <div id=\"pageSearchResults\" tabindex=\"0\">\n        <ul></ul>\n      </div>\n    </div>\n  </p>\n</form>\n\n<div id=\"toc\"></div>\n\n---\n\n## Sharing and citing <a id='sharing'>\n\n### How do I cite VisualPDE in my article?\nThe VisualPDE paper is out! You can find it [online](https://doi.org/10.1007/s11538-023-01218-4){:target=\"_blank\"} for free and cite it as \n\nWalker, B.J., Townsend, A.K., Chudasama, A.K. et al. VisualPDE: Rapid interactive simulations of partial differential equations. Bulletin of Mathematical Biology 85, 113 (2023).\n\n### Am I allowed to make and share content using VisualPDE.com?\nYes! We would love to see you making and sharing content using VisualPDE. We ask that any content you create somehow points back to [VisualPDE.com](https://visualpde.com) – a great way to do this is to share a link directly to your simulation! Feel free to use VisualPDE in articles, images, videos, scientific works, social media posts, etc.\n\n### I want to share my cool simulation – how do I do this? <a id=\"linkSharing\">\nVisualPDE is designed for sharing. Whether you've fallen in love with one of our examples or you've crafted your own using the VisualPDE interface, you can share the current simulation using a link. Simply open the share sheet by clicking {{ layout.share }} and click 'Copy link' to put a URL on your clipboard that you can share anywhere by pasting! It's that easy!\n\nThese links can be quite long, so we recommend using a (free) shortening service like [tinyURL.com](https://tinyurl.com/app) if you want a concise link for sharing.\n\n### How do I take a pretty screenshot or video without all the user interface showing up?\nScreenshots and videos are simple in VisualPDE. Simply open the share sheet by clicking {{ layout.share }} and click 'Save image' to download a screenshot to your device, or 'Record clip' to begin a recording that will download to your device when done (we recommend Chrome or Firefox for this). Recordings can be up to 60s long and will stop before then if you pause the simulation or click {{ layout.stop_recording }}\n\n### How do I make my videos compatible with social media and messaging apps?<a id='videoHelp'>\nDifferent services accept different (and very specific) types of video, so compatibility is hard. Even worse, different browsers can only create certain (different) types of video, so universal video compatibility is essentially impossible for us at VisualPDE (we're trying). Fortunately, there are simple ways to convert video so that it is compatible with your favourite services.\n\nIf you want a quick solution, <a href=\"https://ffmpeg-online.vercel.app/?inputOptions=-i&output=VisualPDERecording.mp4&outputOptions=\" target=\"_blank\">ffmpeg-online</a> will do this for you. Just drag and drop your video, ignore the rest of the boxes and hit the run button to generate a compatible video file. Even better: your video never leaves your device.\n\nIf you prefer a command line solution, then [``ffmpeg``](https://www.ffmpeg.org) is once again your friend. If you have ``ffmpeg`` installed, running ``ffmpeg -i FILENAME output.mp4`` will almost certainly save a compatible copy of your video (``FILENAME``) as ``output.mp4``. Don't just take our word for it - try it out!\n\n### Can I embed VisualPDE in my own site?\nYes you can! Clicking {{ layout.share }} and then 'Embed' will put an [iframe](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) element on your clipboard that points to the current simulation. You can specify the complexity of the user interface that you want to be visible, selecting from the full experience, the minimal interface used in our [Visual Stories](/visual-stories), or no user interface at all. If you do this, we'd love to hear from you at [hello@visualpde.com](mailto:hello@visualpde.com) so we can check out your site and your simulation!\n\nIn principle, you can have as many embedded simulations on your site as you want. In practice, having lots of simulations running at once might cause stuttering on some devices. You can mitigate this by pausing simulations (VisualPDE consumes very few resources when paused) or by only showing a limited number of simulations onscreen at any one time (simulations that are out of view are automatically paused by your browser). You can also make your simulations less computationally demanding by reducing the number of timesteps per frame or the domain size.\n\n---\n\n## Dealing with errors <a id='errors'>\n\n### An error message has popped up – what do I do!?\nSometimes, mistakes happen. If something has gone wrong, VisualPDE will try its best to describe the error in a helpful way via a pop-up. We try to display a helpful error message to help you identify the problem. More cryptic messages are listed below.\n\n#### Undeclared identifier <a id='undeclared'>\n```\nERROR: 0:87: 'k' : undeclared identifier\n```\n\nHere, the quantity 'k' has been used somewhere in one of the many free-text inputs in VisualPDE, but it hasn't been defined. The most common cause of this is using a parameter in the **Definitions** tab without defining it in the **Parameters** tab. Check your definitions and parameters to resolve this. Be careful to define parameters as constant numbers – dependence on other parameters, space, time, or species is not (yet) supported!\n\n#### Cyclic variables/parameters detected <a id='cyclic'>\n```\nCyclic variables/parameters detected. Please check the definition(s) of a,b.\n```\n\nThis error arises when the definitions of your variables or parameters mean that they depend on each other in a cyclic way that can't be resolved. For example, imagine parameters $a$ and $b$ are defined as\n\n$$\\begin{align}a &= b,\\\\ b &= a+1.\\end{align}$$\n\nThere is no solution to this system of equations, so check your definitions and try again.\n\n#### My error looks nothing like any of these\nSometimes, errors won't look anything like these examples. If this is the case and the error message doesn't help you in resolving it, please follows the steps outlined [below](#error) and help make VisualPDE as stable as possible!\n\nNOTE: VisualPDE sometimes won't warn you about multiple errors that involve the same error message (we're working on it). So, if you fix an error involving 'k', you might not be warned about later errors involving 'k' in the same session. Reloading the page (making sure to have copied your configuration URL first!) is a good way of getting around this for now.\n\n### The buttons don't work, but I want to keep playing!\nVery rarely, the simulation and the user interface may become unresponsive. If this happens: \n1. Click {{ layout.help }} to bring up the user guide to try to solve your problem.\n1. Reload the page. Sadly, this won't preserve the configuration beyond that specified in the URL.\nIf the issue is persistent and you're confident that you've followed all the steps outlined in this guide, please report your issue as described [below](#error). \n\n### How do I report an issue? <a id='error'>\nSometimes, something might go wrong (e.g. a part of the user interface is doing something strange, or the simulations are not working on your device). If you encounter an issue that can't be resolved using the [User Guide](/user-guide), we'd love to hear from you at [bugs@visualpde.com](mailto:bugs@visualpde.com).\n\nIf you can, it will help us a lot if you could click <span class='click_sequence'>{{ layout.settings }} → **Misc.** → **Debug** → **Copy debug**</span> and paste the contents into your email. This will contain information about your current configuration that will help us resolve the problem.\n\n---\n\n## Extending and repackaging VisualPDE <a id='extending'>\n\n### I want to use VisualPDE in my teaching/research/outreach – what do I do?\nVisualPDE is designed for customising and sharing. If you're new to the site, we recommend that you play around and work through the examples found in [Basic PDEs](/basic-pdes) to get an idea of how to craft your own simulation, and make use of [link sharing](#linkSharing) to permanently save customised simulations.\n\nFor instance, a popular way to create custom teaching materials is to simply include links to customised VisualPDE simulations in more traditional teaching materials, similar to the [examples](/basic-pdes) on the site.\n\nIf you want to do more than this allows, we'd love to hear from you at [hello@visualpde.com](mailto:hello@visualpde.com) so that we can help bring VisualPDE into your teaching, research, or outreach activities.\n\n### I want to use VisualPDE for my business - can I?\nAlmost certainly! However, we want to make sure that we do knowledge exchange properly, so do get in touch with us at [hello@visualpde.com](mailto:hello@visualpde.com) so that we can make sure you'll get the best out of VisualPDE.\n\n### I've got a feature request – who do I contact?\nWe're always looking to improve VisualPDE and would love to hear from you at [hello@visualpde.com](mailto:hello@visualpde.com) if you think we can improve something about the experience. If you'd like to suggest a brand new PDE for the website, we're looking for examples that are qualitatively different to what is already on the site. That being said, if you've found a cool parameter set for a system that we haven't noted already, do let us know!\n\nIf you can't seem to cast your PDE in a form that VisualPDE can solve, we encourage you to look at the examples in [Basic PDEs](/basic-pdes) to see how various types of PDE can be thrown into VisualPDE, which might provide some inspiration. If you still can't get VisualPDE to solve your system but you think it should/could be possible, we'd love to hear from you.\n\n### Can I modify the source code of VisualPDE and host my own version?\nIn short: yes! We've made VisualPDE open source for a reason and want to see as many people using it as possible. If you want to ship your own version of the source code, we ask that you follow the licences found in our [repository](https://github.com/Pecnut/visual-pde) and provide due credit to [VisualPDE.com](https://visualpde.com). If you're in any doubt about your specific case, do send us an email at [hello@visualpde.com](mailto:hello@visualpde.com) and we'll happily chat with you! We're all about making VisualPDE accessible to as many people as possible.","url":"/user-guide/FAQ","tags":"","img":"/assets/images/question-marks.webp","id":38},{"layout":"page","title":"Advanced documentation","lesson_number":40,"thumbnail":"/assets/images/Brusselator.webp","extract":"A glossary of all the features you can play with","body":"Almost everything in VisualPDE is customisable. Here, we describe the basic functionality of every option that can be found in the menus of VisualPDE.\n\n<form id=\"pageSearchForm\"\nonSubmit=\"page_search(document.getElementById('pageSearchInput').value); return false;\"\n>\n<p>\n    <div id=\"pageSearchBar\">\n    <input\n      type=\"text\"\n      id=\"pageSearchInput\"\n      name=\"q\"\n      maxlength=\"255\"\n      value=\"\"\n      placeholder=\"Search this page\"\n      onfocus=\"document.getElementById('pageSearchForm').onsubmit();window.gtag?.('event', 'page_search');\"\n      oninput=\"document.getElementById('pageSearchForm').onsubmit();\"\n      />\n      <div id=\"pageSearchResults\" tabindex=\"0\">\n        <ul></ul>\n      </div>\n    </div>\n  </p>\n</form>\n\n<div id=\"toc\"></div>\n\n---\n\n## Equations <a id='equations'> {{ layout.equations }}\nVisualPDE is all about solving equations. In the Equations pane, you can view and define the problem that VisualPDE will solve for you in your browser, complete with initial and boundary conditions. More advanced settings, including variable renaming, can be found under [**Settings**](#settings).\n\n### Definitions <a id='definitions'>\n#### Typeset\nHave VisualPDE typeset the specified equations, making use of all the defined diffusion coefficients, functions and parameters. Terms will not be substituted in if they are constants that are not 0 or 1.\n\n#### $D_u$, $D_v$, $D_w$, ...\nSet the diffusion coefficients of all the species in the simulation. When **Cross diffusion** is enabled, you can also set interaction terms, which are written $D_{uv}$ etc. These can be functions of space ($x$, $y$), time ($t$), any of the unknowns ($u$, $v$, $w$, $q$), the size of the domain ($L$, $L_x$, $L_y$), the images ($I_S$, $I_T$) and any quantities defined in **Parameters**. See our discussion of [valid expressions](#valid-expressions) for valid syntax and a list of available in-built functions.\n\n#### $f_u$, $f_v$, $f_w$, ...\nDefine the inhomogeneities in the equations. These can be functions of space ($x$, $y$), time ($t$), any of the unknowns ($u$, $v$, $w$, $q$), the size of the domain ($L$, $L_x$, $L_y$), the images ($I_S$, $I_T$), and any quantities defined in **Parameters**. See our discussion of [valid expressions](#valid-expressions) for valid syntax and a list of available in-built functions. \n\n    Advanced users can also make careful use of 'RAND', a uniformly random value in $[0,1]$, and 'RANDN', a normally distributed random number with unit variance and zero mean. This converts the equations into [stochastic partial differential equations](https://en.wikipedia.org/wiki/Stochastic_partial_differential_equation), which should only be solved using the Forward Euler timestepping scheme. Both 'RAND' and 'RANDN' require manually dividing by 'sqrt(dt)' in non-algebraic equations so that the scheme resembles the [Euler-Maruyama method](https://en.wikipedia.org/wiki/Euler–Maruyama_method). The solution under other timestepping schemes is undefined.\n\n### Parameters <a id='parameters'>\nThis menu contains a list of all the user-specified values that can be used throughout VisualPDE. New parameters can be defined using the empty input field at the bottom of the list of parameters. Parameters can depend on one another, but their definitions cannot be cyclic.\n\n#### Basics\nThe basic syntax for defining a parameter is\n\n```\nname = value\n```\n\nwhich will make the quantity 'name' available to the simulation. You can then freely change 'value', which will instantly propagate throughout VisualPDE. If you try to use a name that clashes with an internal variable (some of which are only found under the hood of VisualPDE), a warning will appear to inform you of this. Parameters can be removed by deleting the text that defines them. You can even choose a 'name' that includes subscripts, such as 'k_1u'. This will be interpreted as $k_{1u}$ automatically by VisualPDE.\n\n#### Sliders\nThe more advanced syntax \n\n```\nname = value in [start,step,stop]\n```\n\ncreates a slider for your variable, ranging between the 'start' and 'stop' values in increments of 'step'. The 'step' parameter can be omitted and VisualPDE will choose a step automatically. For example,\n\n```\na = 0.5 in [0,1]\n```\n\ncreates a slider that ranges between 0 and 1, with initial value 0.5 and an automatically determined step size. Parameters with sliders cannot be defined in terms of other parameters.\n\nThe configuration of a slider (value, start, step, stop) can be updated by modifying the relevant parts of the expression that defines it. Sliders can be removed by deleting 'in ...' from the parameter definition, and will be removed automatically when the associated parameter is removed.\n\n### Boundary conditions <a id='boundary-conditions'>\nBoundary conditions can be specified for any species in the simulation. The following boundary conditions are available:\n\n* Periodic\n* [Dirichlet](https://en.wikipedia.org/wiki/Dirichlet_boundary_condition) (e.g. $u\\onboundary = 0$)\n* [Neumann](https://en.wikipedia.org/wiki/Neumann_boundary_condition) (e.g. $\\pd{u}{n}\\onboundary = 0$)\n* [Robin](https://en.wikipedia.org/wiki/Robin_boundary_condition) (e.g. $(u + \\pd{u}{n})\\onboundary = 0$)\n\nBoundary conditions that allow you to specify values can be functions of space ($x$, $y$), time ($t$), any of the unknowns ($u$, $v$, $w$, $q$), the size of the domain ($L$, $L_x$, $L_y$), the images ($I_S$, $I_T$) and any quantities defined in **Parameters**. Robin boundary conditions are the only type supported that allow you to use an unknown in the specification of its own boundary condition. See our discussion of [valid expressions](#valid-expressions) for valid syntax and a list of available in-built functions.\n\nAn additional option, **Combination**, is also available, which allows you to specify different types of boundary condition on the Left, Right, Top and Bottom sides of rectangular domains. These conditions are specified as a string, e.g. \n\n```\nLeft: Dirichlet = 0; Right: Neumann = 1; Top: Robin = u; Bottom: Dirichlet = sin(x)\n```\n\nfor the species $u$ would specify $u = 0$ on the left boundary, $\\pd{u}{n} = 1$ on the right boundary, $\\pd{u}{n} = u$ on the top boundary and $u = sin(x)$ on the bottom boundary. Sides can be specified in any order and are case sensitive. Omitting any side will default to periodic boundary conditions (beware, this may have unexpected results if the matching side is not also periodic). \n\nAn additional type of condition, 'Ghost', can also be specified with Combination boundary conditions. This advanced option pushes VisualPDE to its limits, overriding the value of the ghost nodes used in the spatial discretisation of the PDE, and should be used with caution. We make use of this option in our Visual Story on [virus transmission](/visual-stories/airborne-infections) to effectively double the size of the computational domain in one direction.\n\n### Initial conditions <a id='initial-conditions'>\nInitial conditions can be specified for any species in the simulation. They can be functions of space ($x$, $y$), the size of the domain ($L$, $L_x$, $L_y$), the images ($I_S$, $I_T$), the random quantity 'RAND', a uniformly random value in $[0,1]$, the random quantity 'RANDN', a normally-distributed random number with unit variance and zero mean, and any quantities defined in **Parameters**. See our discussion of [valid expressions](#valid-expressions) for valid syntax and a list of available in-built functions.\n\n---\n\n## Views <a id='views'> {{ layout.views }}\nThere are often multiple ways to visualise a solution to a PDE. In the Views pane, you can select from and customise a range of example-specific display options, or create your own. Everything you customise will be saved in the current View. If you share your simulation via a link, your Views will be sent along too.\n\n### New (+)\nCreate a new view with a placeholder name from the current view configuration.\n\n### Rename\nEdit the name of the current View, enclosing any mathematics in '$' tags. You can even use emoji.\n\n### Delete\nDelete the currently selected View. Only visible if there are at least two views.\n\n### Expression\nChoose the expression that you want to be used to colour the domain, which can be any function of the species solved for, as well as space, time, and user-defined parameters. Often, this is either $u$, $v$, $w$ or $q$. Explicitly, this can be a function of space ($x$, $y$), time ($t$), any of the unknowns ($u$, $v$, $w$, $q$) and their gradients ($u_x$, $u_y$, etc.), the size of the domain ($L$, $L_x$, $L_y$) and the images ($I_S$, $I_T$).\n\n### Plot type\nChoose from three types of plot: **line**, **plane** or **surface**. Any simulation can be viewed as any plot type.\n\nLine plots are the default plot type for 1D domains. Cubic splines are used to interpolate between nodes of the computational domain for smooth plotting. This may lead to transient oscillations appearing near discontinuities in the solution.\n\nSurface plots are constructed by using the chosen **Expression** as a height map, the limits of the colour axis and the **Height scale** parameter.\n\n### Colour map\nSet the current colour map being used to convert **Expression** into a colour value. Use the dropdown to select from the available options. We have tried to cater for everyone in these options but, if you find that no colour map is available that allows you to easily distinguish between values, please let us know at [hello@visualpde.com](mailto:hello@visualpde.com) so that we can add a more appropriate map.\n\n\n### Min/Max value\nSet the limits of the colour map that transforms  **Expression** into colour. If viewing a surface plot, this also impacts the height of the surface. These can depend on any quantities defined in **Parameters**.\n\n### Flip\nReverse the direction of the current colour map.\n\n### Snap\nClick to instantly snap **Min value** and **Max value** to the current minimum and maximum of **Expression** in the domain.\n\n### Bar\nToggle the display of the current colour bar and limits.\n\n### Auto snap\nToggle the automatic snapping of the colour map limits. This can be very useful if you don't know the range in which **Expression** will fall, especially if it is changing frequently.\n\n### Contours\nToggle the rendering of contours on top of the simulation display. The number, colour, and sensitivity of these (equally spaced) contours can be configured in the **Contours** menu that appears when contours are enabled.\n\n* ##### Colour\nSpecify the colour in which contours will be rendered.\n\n* ##### Number\nSpecify the number of contour lines to plot. These are drawn at equally spaced intervals between the minimum and maximum of the current colourmap e.g. specifying one contour will draw a line at the midpoint of the colourmap.\n\n* ##### Threshold\nSet the relative numerical threshold, between 0 and 1, within which a contour will be detected. Smaller values result in more precise, thinner contours. Larger values may be needed to detect contours in solutions that vary rapidly in space. Under the hood, VisualPDE checks if a given output pixel is within this threshold of a given contour value, with all values normalised by the range of the colourbar. If the range of the colourbar is 0, the behaviour of contours is undefined.\n\n### Lighting\nToggle lighting effects, which adds reflections and shadows to the solution. This often adds a fluid-like character to a simulation, as can be seen in the [Visual Story on water waves](/visual-stories/ripples). We make use of the [Phong reflection model](https://en.wikipedia.org/wiki/Phong_reflection_model). Details of the filter, including its strength and the orientation of the simulated light, can be specified in the **Lighting** menu that appears when lighting is enabled. Some lighting effects may appear slightly pixellated on some devices (typically Android tablets and iPadOS devices), though increasing the grid refinement will mitigate this.\n\n* #### Smoothness\nConfigure the simulated smoothness of the surface. Low values will result in sharp shadows and reflections, whilst larger values will produce an apparently smoother surface.\n\n* #### Ambient\nSet the level of background light, which does not contribute to reflections or shadows.\n\n* #### Diffuse\nSet how much the light source impacts on the brightness of the surface.\n\n* #### Specular\nSpecify the intensity of specular (shiny) reflections.\n\n* #### Precision\nSet the precision (also known as the specular exponent) of the specular reflections. Low values widely scatter light, whilst large values result in precise highlights. \n\n* #### Inclination\nSet the angle of inclination of the light source. Setting this to 0 places the light source directly overhead.\n\n* #### Direction\nSpecify the in-plane direction of the light source, rotating any shadows and highlights.\n\n### Overlay\nToggle the display of an overlay. The expression, colour, and threshold used in displaying the overlay can be specified in the **Overlay** menu that appears when the overlay is enabled.\n\n* #### Colour\nSpecify the colour in which overlays will be rendered.\n\n* #### Expression\nSet an expression whose zero set defines a curve to be displayed in the domain. This can be a function of space ($x$, $y$), time ($t$), any of the unknowns ($u$, $v$, $w$, $q$), their gradients ($u_x$, $u_y$, etc.), the size of the domain ($L$, $L_x$, $L_y$), the images ($I_S$, $I_T$), and any quantities defined in **Parameters**. See our discussion of [valid expressions](#valid-expressions) for valid syntax and a list of available in-built functions. \n\n* #### Threshold\nSet the relative numerical threshold, between 0 and 1, within which the zero set will be detected. Smaller values result in more precise, thinner curves. Larger values may be needed to detect curves in large spatial domains or for expressions that vary rapidly in space. Under the hood, VisualPDE checks if a given pixel is in the zero set to within this threshold.\n\n### 3D options\nWhen viewing surface plots, this menu will appear to allow you to customise aspects of the display.\n\n* #### Custom surface\nToggle the rendering of the solution on a custom, user-defined surface. The surface $z(x,y)$ is specified in **Surface $z$**, which appears when a custom surface is enabled. This definition can be a function of space ($x$, $y$), time ($t$), any user-defined parameters, any of the unknowns ($u$, $v$, $w$, $q$) and their first derivatives, the size of the domain ($L$, $L_x$, $L_y$) and the images ($I_S$, $I_T$).\n\n* #### Height scale\nThe scale factor used when plotting surfaces or lines. Changing this parameter effectively makes the vertical variation appear more/less prominent, though it does not alter the plotted colours. Must be a numerical value.\n\n* #### View $\\theta$/$\\phi$\n[Euler angles](https://en.wikipedia.org/wiki/Euler_angles) specifying the current 3D viewpoint, with $\\theta\\in[0,\\pi]$ and $\\phi\\in[0,2\\pi]$. You can manipulate these values either by inputting new values, or see them update as you rotate the viewpoint with your pointer (click and drag). As Euler angles [don't do a perfect job](https://en.wikipedia.org/wiki/Gimbal_lock) of describing orientations, you may (rarely) find that a viewpoint loaded in from a URL isn't quite what you expected.\n\n* #### Zoom\nThe current zoom level of the 3D view. You can manipulate the value directly or, on touch devices, by 'pinching to zoom'.\n\n### Line options\nWhen viewing line plots, this menu will appear to allow you to customise aspects of the display.\n\n* #### Max height\nThe maximum height of the plotted line, measured in units of $L$. Changing this parameter effectively makes the vertical variation appear more/less prominent. Must be a numerical value.\n\n* #### Thickness\nThe thickness of the plotted line relative to the default. Must be a numerical value.\n\n### Vector field\nToggle the rendering of a vector field on top of the simulation. The definition, colour, density, and size of the vectors can be fully customised. This option is often used to visualise flows or fluxes.\n\n* #### Colour\nSpecify the colour in which arrows will be rendered.\n\n* #### $x$, $y$ component\nSpecify the $x$ and $y$ components of the vector field. These components can be functions of space ($x$, $y$), time ($t$), any user-defined parameters, any of the unknowns ($u$, $v$, $w$, $q$) and their first derivatives, the size of the domain ($L$, $L_x$, $L_y$) and the images ($I_S$, $I_T$).\n\n* #### Density\nSpecify the density of the rendered arrows, normalised between 0 and 1.\n\n* #### Scaling\nConfigure how the rendered arrows will be scaled. ***Relative*** normalises arrows relative to a maximum length that you can specify. ***Auto*** normalises arrows relative to the largest computed arrow at the current instant. ***None*** renders all arrows at the same scale.\n\n* #### Max length\nSpecify the constant length by which all arrows will be normalised. Must be a mathematical expression that is not written in terms of any parameters or user-defined quantities.\n\n---\n\n## Settings <a id='settings'> {{ layout.settings }}\nHere you can edit a wide range of settings, from the size of the brush to the timestep of the simulation.\n\n### Brush <a id='brush'>\nVisualPDE allows you to interact directly with simulations via a brush by simply clicking/pressing on the domain. The brush paints values onto the discrete representation of the domain, which act like initial conditions for the rest of the simulation.\n\n* #### Enable brush\nEnable or disable the brush. Most simulations will have the brush enabled by default.\n\n* #### Type\nChange the shape of the brush, choosing between **Disk**, **Horizontal line** and **Vertical line**. A fourth option, **Custom**, allows you to define a custom shape in the ***Indicator*** field by typing in an expression. The brush will draw wherever the expression is positive. Expressions can be a function of space ($x$, $y$), the brush coordinates ($xB$, $yB$), time ($t$), any user-defined parameters, any of the unknowns ($u$, $v$, $w$, $q$), the size of the domain ($L$, $L_x$, $L_y$), and the images ($I_S$, $I_T$).\n\n* #### Value\nChange the **value** that you are painting. This can be a function of space ($x$, $y$), time ($t$), any user-defined parameters, any of the unknowns ($u$, $v$, $w$, $q$), the size of the domain ($L$, $L_x$, $L_y$), the images ($I_S$, $I_T$), 'RAND', a uniformly random value in $[0,1]$, and 'RANDN', a normally-distributed random number with unit variance and zero mean.\n\n* #### Radius\nChange the brush size, measured on the same scale as the domain size. This can even be a function of space ($x$, $y$), time ($t$), any user-defined parameters, any of the unknowns ($u$, $v$, $w$, $q$), the size of the domain ($L$, $L_x$, $L_y$) and the images ($I_S$, $I_T$).\n\n* #### Species\nSet the **species** ($u$, $v$, $w$, $q$) you are painting.\n\n### Domain <a id='domain'>\n* #### Dimension\nChoose between a 1D or a 2D computational domain. Switching to 1D effectively removes the $y$ dimension from the simulation. Make sure that any expressions you've defined don't contain a $y$ after moving to 1D.\n\n* #### Largest side\nChange the largest side $L$ of the domain. Must be a mathematical expression that is not written in terms of any other parameters or user-defined quantities. If this is not an integer multiple of the space step $\\dx=\\dy$, the domain will extend to $\\floor{L / \\dx}\\dx$ in practice. This guarantees the use of a precise space step.\n\n* #### Space step\nSet the space step $\\dx=\\dy$ used in discretising the domain. You may have to decrease the timestep $\\dt$ in order to maintain numerical stability if you decrease the space step (as discussed [here](/user-guide/solver#timestepping)). Must be a mathematical expression that is not written in terms of any other parameters or user-defined quantities.\n\n* #### Min. $x$, $y$\nSet the minimum values of $x$ and $y$ in the simulation. This amounts to translating the simulation domain by $(x_{min}, y_{min})$. A common use of this is to centre the simulation domain at $(0,0)$ rather than $(L_x/2, L_y/2)$. Can be a function of $L_x$, $L_y$ and any of the user-defined parameters.\n\n* #### Square\nToggle whether or not the domain is forced to be square, independent of the aspect ratio of your device/window.\n\n* #### Custom\nToggle the use of a custom domain $\\domain$ that is determined implicitly from a user-set expression.\n\n* #### Ind. fun (indicator function)\nDefine the domain implicitly by setting a boolean (e.g. $x<0.5$) or a simple expression (e.g. $x-0.5$), where (strict) positivity identifies the interior of the domain. This can be a function of space ($x$, $y$), time ($t$), any of the unknowns ($u$, $v$, $w$, $q$), the size of the domain ($L$, $L_x$, $L_y$) and the images ($I_S$, $I_T$). In order to allow VisualPDE to correctly apply boundary conditions, the edge of the computational domain is always counted as being outside of the custom domain.\n\n### Timestepping <a id='timestepping'>\n* #### Steps/frame\nSet how many timesteps will be performed every time your browser requests a frame from VisualPDE. This setting effectively allows you to speed up/slow down the simulation without altering the timestep, though large values may cause some stuttering on some devices. Must be a numerical value.\n\n* #### Timestep\nSet the timestep $\\dt$ used in the solver. You may have to increase the spatial step $\\dx$ in order to maintain numerical stability if you increase the timestep (as discussed [here](/user-guide/solver)). Must be a numerical value.\n\n* #### Scheme\nSelect one of various timestepping schemes. [Forward Euler](https://en.wikipedia.org/wiki/Euler_method) is the fastest but least accurate; the [Midpoint Method](https://en.wikipedia.org/wiki/Midpoint_method) and [Runge-Kutta 4](https://en.wikipedia.org/wiki/Runge–Kutta_methods) improve upon the accuracy and stability of Forward Euler, though are associated with increased computational cost. [Adams-Bashforth 2](https://en.wikipedia.org/wiki/Linear_multistep_method#Two-step_Adams–Bashforth) is more accurate but less stable than Forward Euler. Use of higher accuracy schemes may require a reduction of Steps/frame to reduce stuttering due to increased computational load. When solving stochastic partial differential equations, only Forward Euler is supported.\n\n* #### Elapsed time\nShow/hide the elapsed time since the simulation was loaded/reset.\n\n* #### Auto pause\nSet the simulation to be automatically paused when the time ($t$) passes a custom threshold, which can be configured when this option is enabled. You can resume an auto-paused simulation by pressing {{ layout.play }}\n\n* #### Performance mode\nReduces the quality of the display in order to boost simulation performance. Different simulations and devices will benefit differently from this setting. On average, we see an increase of around 6fps on a Mac Mini M1 on the 'BenchmarkingFast' preset in 4K resolution.\n\n### Equations <a id='equations_sub'>\n* #### No. species\nSpecify the number of unknowns (1, 2, 3, or 4) in the simulation.\n\n* #### \\#Algebraic\nChoose how many equations you want to be in algebraic form in systems with cross diffusion enabled. The equations will be put in algebraic form in reverse order, e.g. a 4-species system with 1 algebraic species will convert the final equation to be algebraic.\n\n* #### Species (names)\nSpecify custom names for the species in VisualPDE, which often default to $u$, $v$, $w$, $q$. Names can be multi-character and can include letters, numbers, and underscores, but must each be a single 'word'. For example, 'T_01' is a valid name (rendered as $T_{01}$) whilst 'T 01' is not. Space or commas can be used to separate names in the list. Certain names are reserved under the hood, such as 'H' for the Heaviside function, but VisualPDE will warn you if you attempt to use a reserved name. VisualPDE will automatically substitute the names of old species everywhere in the simulation and interface.\n\n* #### Cross (diffusion)\nEnable cross diffusion in systems with 2 or more species, enabling simulation of a wide range of systems.\n\n* #### Scales\nSet per-equation timescales (multiplying any time derivatives) $\\tau_u$, $\\tau_v$, $\\tau_w$, $\\tau_q$ to enable simpler entry of some types of systems. For algebraic equations, these quantities are no longer timescales, but retain their notation and function as per-equation scale factors. They can be functions of space ($x$, $y$), time ($t$), any of the unknowns ($u$, $v$, $w$, $q$), their gradients ($u_x$, $u_y$, etc.), the size of the domain ($L$, $L_x$, $L_y$), the images ($I_S$, $I_T$), and any quantities defined in **Parameters**. See our discussion of [valid expressions](#valid-expressions) for valid syntax and a list of available in-built functions.\n\nImportantly, **timescales must be non-zero**. Setting timescales to zero will result in singularities and are equivalent to large diffusion coefficients, large timesteps, or fast kinetic terms.\n\n### Images <a id='images'>\n* #### $I_S$, $I_T$\nDefine the scalar fields $I_S$ and $I_T$, which are derived from images that you can upload by clicking on the current image. Via the symbols 'I_S' and 'I_T' throughout VisualPDE, you can access the average RGB value of each image at each point in space, effectively treating them as greyscale. Advanced users can access the individual RGBA channels via 'I_SR', 'I_SG', etc. VisualPDE will stretch images so that they cover the domain edge-to-edge. Note that this does not respect **Implicit**. The defaults draw from images of [Sofya Kovalevskaya](https://en.wikipedia.org/wiki/Sofya_Kovalevskaya) and [Alan Turing](https://en.wikipedia.org/wiki/Alan_Turing).\n\n### Checkpoints <a id='checkpoints'>\nVisualPDE supports checkpoints, which allow you to save the state of a simulation at the touch of a button. This allows you to instantly return to a previous solution state - very handy if you've crafted the perfect initial condition by painting with the brush. Revert to a checkpoint by pressing {{ layout.restart }}\n\n* #### Enable checkpoints\nToggle the use of checkpoints. When enabled, resetting the simulation will revert to a saved checkpoint (if one exists) instead of using any initial conditions defined alongside the equations.\n\n* #### Set\nSave the current simulation as a checkpoint.\n\n* #### Export\nClick to export the last checkpoint as a file to your device, which can be shared and uploaded to the site and used as a checkpoint. If no checkpoint exists, one will be created. By default, the file will be called 'VisualPDEState'.\n\n* #### Import\nImport a checkpoint from a VisualPDE file. By default, these are called 'VisualPDEState'.\n\n* #### Resize\nSpecify how a checkpoint should be resized to fit the current simulation domain. 'Stretch' will stretch the checkpoint so that it fills the current domain, but will not preserve the aspect ratio in general. \"Crop\" will crop the checkpoint whilst preserving the aspect ratio, but may result in some information not being used.\n\n### Misc <a id='misc'>\n* #### Background\nSet the background colour of the simulation window, which you will see often when using **Surface Plot** or **Implicit**. In implicit domains, the exterior of the domain adopts this colour.\n\n* #### Integrate\nDisplay the integral of **Expression** over the domain. This integral is coarsely approximated by a simple Riemann sum, with accuracy improving with mesh refinement. This can be used to track the numerical evolution of quantities that should be conserved in a system.\n\n* #### Interpolate\nUse this option to force the use of manual, unoptimised filtering in place of device-default interplation of displayed colours. This toggle is not available on devices that do not support interpolation by default; in this case, manual interpolation is always enabled.\n\n* #### Set seed\nSet the seed of the (pseudo)random number generator used to assign values to 'RAND' and 'RANDN' in all free-text fields in the VisualPDE interface. Note that 'RAND' and 'RANDN' always vary in space. A specific random seed in the form of a numerical value can be configured (default 0).\n\n* #### Dev\nTools intended for the development and benchmarking of VisualPDE. \n\n    ***Copy code*** will copy a verbose description of your simulation in JSON form, which is especially useful if you're extending VisualPDE with your own examples. It will base the example on the selected 'parent' preset, which can be useful if you're making multiple slightly different versions of a simulation. \n\n    ***Copy debug*** will copy a selection of configuration information to your clipboard (handy when reporting bugs).\n\n    ***Show stats*** will toggle the display of performance statistics in the lower left corner of the display. We use this to benchmark performance impacts of new features and optimisations.\n\n    ***Antialias*** will toggle the use of antialiasing when displaying the simulation. Antialiasing in VisualPDE smooths out the jagged edges of displayed vector fields, though always causes a slight device-dependent performance loss. This is off by default for mobile devices, but can be overridden. Toggle requires a page reload.\n\n---\n\n## Writing valid expressions <a id='writing-valid-expressions'>\n### Standard syntax\nVisualPDE aims to support standard mathematical syntax (+,-,*,/), along with the caret notation '^' for exponentiation. Parentheses '()' are also supported for bracketing terms together, and must be used when calling any special functions. In general, whitespace around binary operators will be ignored, so that '2 * 2' is valid syntax for multiplication, for example. Quantities with subscripts, such as $L_x$ and $L_y$, are written with an underscore, e.g. 'L_x' and 'L_y'. Boolean expressions (e.g. 'x < 0') can be used as indicator functions by surrounding them with the function 'ind' (e.g. 'ind(x < 0)').\n\nExamples of valid syntax include\n\n```\nsin(x) * cos(y)\nexp( -(x-L_x)^2 / 10)\n1 + (x^2 + x + 1) / (y^2 + y + 1)\n```\n\n### Advanced syntax\nSome terms in VisualPDE have additional functionality when written with special syntax.\n#### Images\nBy default, images are accessed using 'I_T' and 'I_S', with individual channels available by appending R,G,B or A. When a channel is specified, you can access images using coordinates using the syntax 'I_TR(x,y)'. Examples include\n\n```\nI_TR(2*x, y)\nI_SB(x-t, y-t)\nI_TG(x, y + sin(u))\n```\n\n#### One-sided differences\nFirst derivatives in space, accessed with 'u_x', 'u_y', ..., are computed using a central finite difference discretisation by default. By appending 'f' or 'b' to the subscript, such as 'u_xf', you can tell VisualPDE to use a forward or a backward difference, respectively. Forward differences sample the solution at increased $x$ (or $y$), whilst backward differences sample at decreased $x$ (or $y$). These specialised schemes can be used in [upwind schemes](https://en.wikipedia.org/wiki/Upwind_scheme) and often reduce numerical artefacts, but at the expense of typically larger numerical error.\n\n    Forward and backward differences can also be computed with second-order numerical schemes by appending '2' to the subscript, though in general this will only respect Periodic boundary conditions in the direction of the derivative. This syntax can only be used in the **Definitions** section.\n\n### Special functions\nThroughout VisualPDE, you can make use of the special functions 'sin', 'cos', 'tan', 'exp', 'log', 'sqrt', 'sinh', 'cosh', 'tanh' and 'H', where the latter is a [Heaviside function](https://en.wikipedia.org/wiki/Heaviside_step_function) smoothed over the interval $[-1,1]$ (see the [GLSL reference](https://registry.khronos.org/OpenGL-Refpages/gl4/html/smoothstep.xhtml) for details). All function arguments should be surrounded by parentheses, e.g. 'sin(x)'. You can also use 'min' and 'max' as functions with two arguments, which return the minimum or maximum of their arguments, e.g. 'min(u,1)' returns the minimum of $u$ and 1. If you wish to raise the output of a function to a power, you must enclose the function in parentheses, e.g. write '(cos(x))^2', not 'cos(x)^2'.","url":"/user-guide/advanced-options","tags":"","img":"/assets/images/Brusselator.webp","id":39},{"layout":"page","title":"Quick start","lesson_number":10,"thumbnail":"/assets/images/start.webp","extract":"Two-minute top tips","body":"VisualPDE is a web-based set of tools for solving partial differential equations (PDEs) via an interactive, easy-to-use simulation. To get started, try playing with some of the examples in [Basic PDEs](/basic-pdes), or read on for some quick tips for using the solver.\n\n### Interacting with the simulation <a id='interacting'>\nClicking/pressing on the simulation draws values right onto the domain. You can customise exactly what this does under <span class='click_sequence'>{{ layout.settings }} → **Brush** </span> For example, the default settings in the [heat equation example](/basic-pdes/heat-equation) allow you to paint 'heat' of value 1 onto the domain, which acts like an initial condition for the rest of the simulation.\n\n### The equations panel <a id='equations-panel'>\nPressing {{ layout.equations }} opens up the **equations panel**.\n\n{:refdef: style=\"text-align: center;\"}\n![Equations panel](/assets/images/equations-panel.webp){: width=\"253px\" border=\"1px black\"}\n{: refdef}\n\nHere you can:\n* See the [equation being simulated](#equations), here $\\pd{u}{t} = \\vnabla\\cdot(D_u\\vnabla u) + f_u$.\n* Set the named functions in the equations, here $D_u$ and $f_u$, under **Definitions**. These can be functions of any of the unknowns, space, and time (here $u$, $x$, $y$, and $t$), and of any parameters that will be defined further down the panel.\n* Set the value of any extra parameters.\n* Set the [boundary conditions](#boundary-conditions).\n* Set the [initial conditions](#initial-conditions).\n\n### Domain shape <a id='domain-shape'>\n\nThe default **domain** for solving PDEs is a 2D rectangle, $\\domain = [0,L_x]\\times[0,L_y]$, which fits the size of your browser window or phone screen. Throughout VisualPDE, we use coordinates $x\\in[0,L_x]$ and $y\\in[0,L_y]$.\n\nYou can force the domain to be square, $\\domain = [0,L]\\times[0,L]$, by toggling <span class='click_sequence'>{{ layout.settings }} → **Domain** → **Square**</span>\n\n### Boundary conditions <a id='boundary-conditions'>\n\nThe following **boundary conditions** are available to allow you to set the value of the function, or the value of its derivative, along the boundary $\\boundary$ of the domain $\\domain$:\n\n* Periodic\n* [Dirichlet](https://en.wikipedia.org/wiki/Dirichlet_boundary_condition) (e.g. $u\\onboundary = 0$)\n* [Neumann](https://en.wikipedia.org/wiki/Neumann_boundary_condition) (e.g. $\\pd{u}{n}\\onboundary = 0$)\n* [Robin](https://en.wikipedia.org/wiki/Robin_boundary_condition) (e.g. $(u + \\pd{u}{n})\\onboundary = 0$)\n\nYou can swap between boundary conditions by choosing <span class='click_sequence'>{{ layout.equations }} → **Boundary conditions**</span> and selecting from the list for each variable.\n\n### Initial conditions <a id='initial-conditions'>\nYou can specify the values to which the unknowns ($u$, $v$, $w$) are initialised when resetting the simulation. These expressions can be functions of $x$, $y$, the special string 'RAND' that assigns a random number in [0,1] to each point in the domain, along with any user-defined parameters and the images $I_S$ and $I_T$ (see the [advanced documentation](/user-guide/advanced-options) for more details). You can also use $L$, $L_x$ and $L_y$.\n\n### Changing the equations <a id='equations'>\n\nThe simplest system VisualPDE can solve is a single PDE,\n\n$$\\pd{u}{t} = \\vnabla \\cdot (D_u \\vnabla u) + f_u,$$\n\nwhere $D_u$ and $f_u$ are functions of $u$, $x$, $y$, and $t$ that you can specify.\n\nThe most complicated type is a coupled system of PDEs in four unknowns, $u$, $v$, $w$ and $q$:\n\n$$\\begin{aligned}\nt_u\\pd{u}{t} &= \\vnabla \\cdot(D_{uu}\\vnabla u+D_{uv}\\vnabla v+D_{uw}\\vnabla w+D_{uq}\\vnabla q) + f_u,\\\\\n\\text{one of}\\left\\{\\begin{matrix}\\displaystyle t_v\\pd{v}{t} \\\\ v\\end{matrix}\\right. & \n\\begin{aligned}\n    &= \\vnabla \\cdot(D_{vu}\\vnabla u+D_{vv}\\vnabla v+D_{vw}\\vnabla w+D_{vq}\\vnabla q) + f_v \\vphantom{\\displaystyle t_v\\pd{v}{t}}, \\\\\n    &= \\vnabla \\cdot(D_{vu}\\vnabla u+D_{vw}\\vnabla w+D_{vq}\\vnabla q) + f_v,\n\\end{aligned}\\\\\n\\text{one of}\\left\\{\\begin{matrix}\\displaystyle t_w\\pd{w}{t} \\\\ w\\end{matrix}\\right. & \n\\begin{aligned}\n    &= \\vnabla \\cdot(D_{wu}\\vnabla u+D_{wv}\\vnabla v+D_{ww}\\vnabla w+D_{wq}\\vnabla q) + f_w \\vphantom{\\displaystyle t_w\\pd{w}{t}}, \\\\\n    &= \\vnabla \\cdot(D_{wu}\\vnabla u+D_{wv}\\vnabla v+D_{wq}\\vnabla q) + f_w,\n\\end{aligned}\\\\\n\\text{one of}\\left\\{\\begin{matrix}\\displaystyle t_q\\pd{q}{t} \\\\ q\\end{matrix}\\right. & \n\\begin{aligned}\n    &= \\vnabla \\cdot(D_{qu}\\vnabla u+D_{qv}\\vnabla v+D_{qw}\\vnabla w+D_{qq}\\vnabla q) + f_q \\vphantom{\\displaystyle t_q\\pd{q}{t}}, \\\\\n    &= \\vnabla \\cdot(D_{qu}\\vnabla u+D_{qv}\\vnabla v+D_{qw}\\vnabla w) + f_q,\n\\end{aligned}\n\\end{aligned}$$\n\nwhere $D_{uu}, \\dots,  D_{qq}$, $f_u, \\dots, f_q$ and $t_u, \\dots, t_q$ are functions of $u$, $v$, $w$, $q$, $x$, $y$ and $t$ that you can specify.\n\n* You can change the number of unknowns by choosing <span class='click_sequence'>{{ layout.settings }} → **Equations** → **No. species**</span>\n* In systems of multiple unknowns, you can include terms representing cross-diffusion (e.g. $D_{uv}$, $D_{vu}$) by toggling <span class='click_sequence'>{{ layout.settings }} → **Equations** → **Cross**</span>\n* In systems of multiple unknowns, you can choose between a differential or algebraic equation for some of the species (e.g. '$\\partial w/\\partial t=$' or '$w=$') by toggling <span class='click_sequence'>{{ layout.settings }} → **Equations** → **Algebraic w** (or **v** or **q**)</span>\n\n### More VisualPDE\nFor a comprehensive list of all the options that you can set in VisualPDE, check out the [Advanced documentation](/user-guide/advanced-options), or discover what VisualPDE can solve in our brief [summary](/user-guide/what-can-visualpde-solve).\n","url":"/user-guide/quick-start","tags":"","img":"/assets/images/start.webp","id":40},{"layout":"page","title":"The VisualPDE solver","lesson_number":30,"thumbnail":"/assets/images/UnderTheHood.webp","extract":"Under the hood of VisualPDE","body":"VisualPDE aims to be a plug-and-play, browser-based solver and visualiser for a range of PDE systems, with as few barriers to entry as possible. Underneath what we hope is a polished exterior, we've made a number of somewhat technical choices to enable interactive and reliable solution across as many devices as we can support. To explain these choices, and because we like knowing what's going on inside any software we use, we've compiled a short summary of how VisualPDE works under the hood. Soon, this will be accompanied by a more detailed account in an open access article.\n\nWe are always looking for ways to improve and extend VisualPDE, especially ways of reaching a broader audience and new communities. If you have any questions or suggestions about anything related to VisualPDE, we'd love to hear from you at [hello@visualpde.com](mailto:hello@visualpde.com)!\n\n<form id=\"pageSearchForm\"\nonSubmit=\"page_search(document.getElementById('pageSearchInput').value); return false;\"\n>\n<p>\n    <div id=\"pageSearchBar\">\n    <input\n      type=\"text\"\n      id=\"pageSearchInput\"\n      name=\"q\"\n      maxlength=\"255\"\n      value=\"\"\n      placeholder=\"Search this page\"\n      onfocus=\"document.getElementById('pageSearchForm').onsubmit();window.gtag?.('event', 'page_search');\"\n      oninput=\"document.getElementById('pageSearchForm').onsubmit();\"\n      />\n      <div id=\"pageSearchResults\" tabindex=\"0\">\n        <ul></ul>\n      </div>\n    </div>\n  </p>\n</form>\n\n<div id=\"toc\"></div>\n\n### The equations <a id='equations'>\nVisualPDE can solve a variety of PDE systems posed in 1D or 2D space, many of which are straightforward extensions of the two-species reaction–diffusion system,\n\n$$\\begin{aligned}\n    \\pd{u}{t} &= \\vnabla \\cdot(D_u\\vnabla u) + f_u,\\\\\n    \\pd{v}{t} &= \\vnabla \\cdot(D_v\\vnabla v) + f_v.\n\\end{aligned}$$\n\nHere, $u$ and $v$ are the scalar unknowns that we solve for, $t$ is time, and the divergence and gradient operators are the usual spatial operators in a 2D Euclidean domain. In general, the interaction/kinetic terms ($f_u$ and $f_v$) and the diffusion coefficients ($D_u$ and $D_v$) can each be functions of time, space, and the unknowns, though we often don't explicitly write these potential dependencies. See [here](what-can-visualpde-solve) for a comprehensive summary of the types of PDEs that VisualPDE can solve.\n\n### The domain <a id='domain'>\nA PDE problem is not well-posed without specifying a domain (or [boundary conditions](#boundary-conditions)). We typically determine the domain $\\domain$ from the size of your device, fixing the largest side to be of length $L$ and maintaining an aspect ratio of 1:1. As most screens are not square, you can demand a square domain using a toggle under <span class='click_sequence'>{{ layout.settings }} → **Domain** → **Square**</span>\n\nHowever, not all domains are rectangular. To accommodate this, VisualPDE allows you to specify an arbitrary domain via a [level set](https://en.wikipedia.org/wiki/Level-set_method) or [indicator function](https://en.wikipedia.org/wiki/Indicator_function) approach, under <span class='click_sequence'>{{ layout.settings }} → **Domain** → **Implicit**</span> To make this work in practice, VisualPDE uses this user-specified function to determine which parts of $\\domain$ to include in the simulation, though this prevents you from specifying boundary conditions that include derivatives (computing normals to user-specified curves is not something we wanted to think about). You can specify a boolean (e.g. $x<0.5$) or a simple expression (e.g. $x-0.5$), where (strict) positivity identifies the interior of the domain. You can even use images in this expression, allowing you to define complicated domains with ease.\n\n### Spatial discretisation <a id='spatial-discretisation'>\nWe take $\\domain$ and divide it into a square grid with a user-configurable spacing. Be warned: the only limit to this spacing is your imagination/hardware, so taking a spatial step of $\\dx=10^{-9}$ is unlikely to be a good idea... We use this grid in a [finite difference](https://en.wikipedia.org/wiki/Finite_difference_method) scheme to approximate the spatial operators in our system.\n\nIf $D_u$ and $D_v$ were simply constants, as they were when we began the development of VisualPDE, a standard [central differences](https://en.wikipedia.org/wiki/Discrete_Laplace_operator) discretisation of the resulting Laplacian $\\nabla^2$ would suffice. However, as these coefficients generally vary in space, we employ a similar but necessarily more complex scheme. Explicitly, using $\\vnabla \\cdot(D_u\\vnabla u)$ as an example and limiting ourselves to 1D for brevity, we approximate\n\n$$\\textstyle \\vnabla \\cdot(D_u\\vnabla u) \\approx \\frac{D_u(x-\\dx)[u(x-\\dx) - u(x)] + D_u(x)[u(x-\\dx) - 2u(x) + u(x+\\dx)] + D_u(x+\\dx)[u(x+\\dx) - u(x)]}{2\\,\\dx^2}$$\n\nat a point $x$, where we've omitted any dependence of any quantities on anything other than space. Notably, this is just a standard central differences scheme if $D_u$ is constant. Adding the above to itself with $x$ replaced with $y$ gives the 2D discretisation, and adding in additional terms is simple by linearity.\n\n### Timestepping <a id='timestepping'>\nWith space discretised as above, we are faced with a large system of coupled ordinary differential equations to solve, which represent the evolution of the unknowns at each discrete gridpoint of the spatial domain. VisualPDE implements four popular schemes for timestepping: [Forward Euler](https://en.wikipedia.org/wiki/Euler_method), two-step [Adams-Bashforth](https://en.wikipedia.org/wiki/Linear_multistep_method#Two-step_Adams–Bashforth), the [Midpoint Method](https://en.wikipedia.org/wiki/Midpoint_method) and the four-step [Runge-Kutta](https://en.wikipedia.org/wiki/Runge–Kutta_methods) method (commonly known as 'RK4'). These solvers each have their strengths, with Forward Euler being the least computationally demanding while RK4 offers superior accuracy and stability at the cost of doing more calculations each timestep. The following Forward Euler scheme is the default in many of the examples on the site:\n\n$$ \\pd{u}{t} \\approx \\frac{u(t+\\dt) - u(t)}{\\dt}$$\n\nfor timestep $\\dt$. This approach is far from state-of-the-art, but it is straightforward and intuitive to implement on massively parallel computing hardware (more on that [later](#browser)).\n\nIn practice, its simplicity can lead to some problems, with [numerical instability](https://en.wikipedia.org/wiki/Euler_method#Numerical_stability) being perhaps the most pathological. Loosely speaking, the interaction between the forward Euler scheme and our spatial discretisation can lead to numerical artefacts ruining the solution, which typically occur when the ratio $D \\, \\dt / \\dx^2$ is too small, where $D$ is any of the diffusion coefficients in the problem. Both the Midpoint Method and RK4 improve upon the stability of Forward Euler, whilst the Adams-Bashforth scheme is generally less stable but more accurate than Forward Euler.\n\nVisualPDE will try to tell you when it's fallen foul of stability issues (we periodically check for 'NaN' or $\\pm\\infty$ in the solution), at which point you might want to try reducing $\\dt$, trying out a different solver, reducing the diffusion coefficients in your problem, or increasing $\\dx$ (we recommend trying each of these things in this order). If you want to experience this for yourself for Forward Euler, try clicking in [this](/sim/?preset=unstableHeatEquation) simulation. It turns out that only RK4 will make this simulation stable due to the relative size of the diffusion coefficient, timestep $\\dt$ and spatial step $\\dx$, which you can see for yourself by switching the timestepping scheme.\n\nDespite each of our solvers having their limitations, these schemes have enabled VisualPDE to efficiently solve every system that we've thrown at it, though some tuning of the timestep can be necessary in extreme cases. If you have any tips for implementing alternative schemes (especially anything implicit), we'd love to hear from you!\n\n### Boundary conditions <a id='boundary-conditions'>\nVisualPDE implements four types of boundary condition: periodic, [Dirichlet](https://en.wikipedia.org/wiki/Dirichlet_boundary_condition), [Neumann](https://en.wikipedia.org/wiki/Neumann_boundary_condition), and [Robin](https://en.wikipedia.org/wiki/Robin_boundary_condition). As each of these are slightly different in character, we briefly describe the general form of each condition that can be used in VisualPDE, along with notes on how this is enforced in the simulation. We pose these conditions as if they correspond to the scalar [heat equation](/_basic-pdes/heat-equation) in 2D.\n\n#### Periodic\nPeriodic boundary conditions, where $u(x+L_x,y)=u(x,y)$ etc, are the simplest to implement. If our spatial discretisation is attempting to sample a function outside of $\\domain$, we simply map its argument back to $\\domain$ by shifting by $L_x$ or $L_y$.\n\n#### Dirichlet\nDirichlet boundary conditions take the form $u\\onboundary = a(x,y,t)$ for a user-specified function $a$. These are easy to enforce, as we simply override our usual timestepping for any nodes on the boundary of the domain. If the user has chosen to use an implicitly defined domain, we assign $a(x,y,t)$ to all points outside of $\\domain$.\n\n#### Neumann\nNeumann boundary conditions are specified as $\\pd{u}{n}\\onboundary = a(x,y,t)$ for a user-specified function $a$, where $\\pd{u}{n}$ denotes a derivative in the direction of the (outward-pointing) normal to the boundary. Implementing a Neumann boundary condition is done via so-called **ghost nodes** in our discretisation. For instance, enforcing $\\pd{u}{n}\\onboundary = 0$ at the left-most $x$ boundary of a rectangular domain is achieved in practice by taking \n\n$$\\textstyle u(x-\\dx,y) = u(x+\\dx,y)$$ \n\nin the finite difference operator described [above](#spatial-discretisation).\n\n#### Robin\nRobin boundary conditions are a natural combination of Dirichlet and Neumann conditions, which we pose in the form of a generalised Neumann condition $\\pd{u}{n}\\onboundary = a(u,x,y,t)$, where the right-hand side can now depend on $u$ (and any other unknown in multi-species systems). These conditions are also implemented with ghost nodes. For example, enforcing $\\pd{u}{n}\\onboundary = u\\onboundary$ at the leftmost $x$ boundary of a rectangular domain is achieved in practice by taking \n\n$$\\textstyle u(x-\\dx,y) = u(x+\\dx,y) + 2 u(x,y)\\,\\dx$$ \n\nin the finite difference operator described [above](#spatial-discretisation), approximating the derivative at the boundary with a simple central difference.\n\n#### Combined\nVisualPDE also allows you to specify different boundary conditions on different parts of the boundary. Doing this requires some special syntax, as detailed in the [advanced documentation](/user-guide/advanced-options#boundary-conditions).\n\n### Doing this in your browser, quickly <a id='browser'>\nSolving PDEs is hard. To solve them in real time in your browser, VisualPDE gives all the hard work to the graphics chip (GPU) on your device, making use of [WebGL](https://en.wikipedia.org/wiki/WebGL) and a low-level shader language called [GLSL](https://en.wikipedia.org/wiki/OpenGL_Shading_Language).\n\nEvery time your browser requests a frame from VisualPDE (which might be up to 60 times per second), some [JavaScript](https://en.wikipedia.org/wiki/JavaScript) organises the solving of the discretised equations, displaying the solution, and incorporating anything you've drawn, which all happen on the GPU. Each frame, we typically perform hundreds of timesteps to give you a smooth experience, mitigating many of the limitations of our [timestepping schemes](#timestepping). If you're interested in the finest details of the implementation, the source code for the entire site is freely available to view, reuse, and repurpose on [GitHub](https://github.com/Pecnut/visual-pde).\n\n### Accuracy and precision\nVisualPDE hopes to be as accurate as possible whilst providing a responsive, visual, portable platform for solving PDEs. In most systems, the timestep, timestepping scheme and spatial discretisation will be the main source of any errors, as you'd expect from finite-difference discretisations of PDEs. Naturally, smaller timesteps, higher order timestepping schemes and refined spatial discretisations will often improve the accuracy of the solution, but each will incur additional computational costs. With VisualPDE, you can choose the balance that works best for you (and potentially your audience).\n\nA more subtle limit on the accuracy of VisualPDE is our use of single-precision arithmetic, something we've inherited from the libraries we use and the capabilities of modern hardware. We'll be moving to double-precision computation as soon as we can to maximise the accuracy of VisualPDE. In the meantime, rest assured that single-precision arithmetic is sufficient for capturing a wide range of phenomena, including those explored in our examples, but keep this caveat in mind when seeking to find precise quantitative answers to PDE problems.","url":"/user-guide/solver","tags":"","img":"/assets/images/UnderTheHood.webp","id":41},{"layout":"page","title":"What can VisualPDE solve?","lesson_number":20,"thumbnail":"/assets/images/squirrel-question.webp","extract":"A brief intro to the systems we simulate","body":"VisualPDE solves systems of PDEs that look like generalised reaction--diffusion equations. It can do this in 1D or 2D.\n\nThe simplest type of system is just a single PDE in a single unknown, $u$,\n\n$$\\pd{u}{t} = \\vnabla \\cdot (D_u \\vnabla u) + f_u,$$\n\nwhere $D_u$ and $f_u$ are functions of $u$, $t$, and space that you can choose. For example, if $f_u=0$ and $D_u$ is a constant, you have [the heat equation](/basic-pdes/heat-equation). \n\nThe most complicated type is a coupled system of PDEs in four unknowns, $u$, $v$, $w$ and $q$:\n\n$$\\begin{aligned}\nt_u\\pd{u}{t} &= \\vnabla \\cdot(D_{uu}\\vnabla u+D_{uv}\\vnabla v+D_{uw}\\vnabla w+D_{uq}\\vnabla q) + f_u,\\\\\n\\text{one of}\\left\\{\\begin{matrix}\\displaystyle t_v\\pd{v}{t} \\\\ v\\end{matrix}\\right. & \n\\begin{aligned}\n    &= \\vnabla \\cdot(D_{vu}\\vnabla u+D_{vv}\\vnabla v+D_{vw}\\vnabla w+D_{vq}\\vnabla q) + f_v \\vphantom{\\displaystyle t_v\\pd{v}{t}}, \\\\\n    &= \\vnabla \\cdot(D_{vu}\\vnabla u+D_{vw}\\vnabla w+D_{vq}\\vnabla q) + f_v,\n\\end{aligned}\\\\\n\\text{one of}\\left\\{\\begin{matrix}\\displaystyle t_w\\pd{w}{t} \\\\ w\\end{matrix}\\right. & \n\\begin{aligned}\n    &= \\vnabla \\cdot(D_{wu}\\vnabla u+D_{wv}\\vnabla v+D_{ww}\\vnabla w+D_{wq}\\vnabla q) + f_w \\vphantom{\\displaystyle t_w\\pd{w}{t}}, \\\\\n    &= \\vnabla \\cdot(D_{wu}\\vnabla u+D_{wv}\\vnabla v+D_{wq}\\vnabla q) + f_w,\n\\end{aligned}\\\\\n\\text{one of}\\left\\{\\begin{matrix}\\displaystyle t_q\\pd{q}{t} \\\\ q\\end{matrix}\\right. & \n\\begin{aligned}\n    &= \\vnabla \\cdot(D_{qu}\\vnabla u+D_{qv}\\vnabla v+D_{qw}\\vnabla w+D_{qq}\\vnabla q) + f_q \\vphantom{\\displaystyle t_q\\pd{q}{t}}, \\\\\n    &= \\vnabla \\cdot(D_{qu}\\vnabla u+D_{qv}\\vnabla v+D_{qw}\\vnabla w) + f_q,\n\\end{aligned}\n\\end{aligned}$$\n\nwhere the diffusion coefficients ($D_{uu}$ etc.), the timescales ($t_u$ etc.) and the interaction/kinetic terms ($f$, $g$, $h$, $j$) can depend on the unknowns, space, and time. In matrix form, we can summarise this by saying we solve systems of the form\n\n$$\\m{M} \\pd{\\v{u}}{t} = \\vnabla\\cdot(\\m{D}\\vnabla\\v{u}) + \\v{f},$$\n\nwhere\n\n* $\\v{u}$ is a vector of one, two, three or four unknowns,\n* $\\m{M}$ is a diagonal matrix with potentially some zeros on the diagonal; you might know this as a 'mass matrix',\n* $\\m{D}$ is a possibly non-constant matrix that may contain zeros; you might know this as a 'diffusion tensor',\n* $\\v{f}$ is a vector of one, two, three or four components that contains our interaction or kinetic terms.\n\nVisualPDE allows you to easily change the [number of components](quick-start#equations) and the [boundary conditions](quick-start#boundary-conditions). You can set initial conditions just by clicking the screen.\n\n","url":"/user-guide/what-can-visualpde-solve","tags":"","img":"/assets/images/squirrel-question.webp","id":42},{"layout":"page","title":"Virus transmission","lesson_number":20,"thumbnail":"/assets/images/VirusTransmission.webp","extract":"Visualising airborne infections","equation":null,"body":"Since the Covid-19 pandemic began, airborne viruses have formed a large part of scientific study. In this short Story, we're going to explore one aspect of this work: the effects of airflow.\n\nBefore we begin, it's worth noting that the results of the simulations in this Story aren't meant to match up perfectly with reality, so we'll focus on qualitative features rather than on particular values. At the end of our exploration we'll point you towards the full science behind this Story, which includes discussions of the assumptions behind the mathematical model that inspired our Story.\n\nSuppose that lots of people are sitting in a sealed room and one of them is infectious. We'll assume that the infectious person is constantly producing virus-laden particles that spread out around them and lose their potency over time. The simulation below shows what this might look like. The colour corresponds to the concentration or amount of the virus in the air. \n\n<iframe class=\"sim\" src=\"/sim/?preset=CovidInAStillRoom&story&sf=1\" frameborder=\"0\" loading=\"lazy\"></iframe>\n\nWith VisualPDE, we're not just limited to watching a simulation: we can interact with it too. Clicking in the room will introduce some viral particles to the air, as if someone with an infection had coughed (coughing is actually a lot more complicated and is the focus of lots of [research](https://doi.org/10.1146/annurev-fluid-060220-113712)). Try clicking to see what difference a cough can make.\n\nThough each cough introduces some virus to the room, it looks like it quickly decays away until we can't even tell it was there. So, does this mean we shouldn't be worried about a cough?\n\n# Catching the virus\nTo explore this further, let's look at the probability (or chance) of getting an infection, which is related but not equal to the virus concentration. Specifically, we'll look at the chance of catching the virus assuming that you'd been in the same location for the duration of the simulation. With VisualPDE, we can do this by switching to the Probability View by pressing {{ layout.views }} and choosing 'Probability'.\n\nHere, the probability of being infected is large close to where we know the source of the infection is, right in the middle of the room. If you clicked in the room to simulate a cough, you should also see some high probabilities elsewhere. This shows that, even though the viral particles seem to disperse quickly after a cough, they make a significant difference to the probability of catching an infection near to the cougher.\n\nAs you might expect, the probability of being infected increases with the amount of time that you're exposed to the virus. This time-dependent effect is especially visible when you click to cough while using the Probability View. To reset the simulation and see this clearly, press {{ layout.erase }}. What do you think will happen if you cough multiple times in the same spot? Test out your prediction with VisualPDE!\n\n# Recirculation\nIt's fairly rare for air to stay still. Let's see what effect the movement of air can have on the distribution of a virus and the chance of infection. In the simulation below, we've added in the effects of the air being blown from left to right, mimicking an air conditioner, with anything that reaches the right-hand side of the room being blown back over everyone's heads before being recycled back into the left-hand side.\n\n<iframe class=\"sim\" src=\"/sim/?preset=CovidInARoom&story&sf=1\" frameborder=\"0\" loading=\"lazy\"></iframe>\n\nWith this new air movement, it now looks like standing downwind of the infected person is a bad idea: particles carrying the virus are swept from left to right by the air current, and the probability of being infected is much higher on the right of the infected person. Eventually, the recirculation of the air means that viral particles reach even the left-hand side of the room, leading to a large zone in the room where the probability of infection is high. \n\nRemember, you can swap between Views to see the effects on both probability and concentration. Try clicking while viewing the concentration to really see how the air drives the spread of the virus in one direction then blows it back from right to left, recirculating the virus over the room. This is in stark contrast to the behaviour of a cough in the earlier flow-free room.\n\n# A meandering infection\nPeople don't always stay still in the middle of rooms. Unsurprisingly, the movement of an infected individual can have a big impact on the spread of a virus. In the next simulation, we've set it up so that the source of the infection moves around the room, as if they were a waiter going between tables in a restaurant, perhaps. We've also turned off the air conditioner, so that the air in the room is still.\n\n<iframe class=\"sim\" src=\"/sim/?preset=CovidInAStillRoomCircling&story&sf=1\" frameborder=\"0\" loading=\"lazy\"></iframe>\n\nThe Probability View shows the build-up of a ring of likely infections as the infectious person circles the room. A quick look at the Concentration View shows their circular path, leaving a trail of viral particles behind them.\n\nIn this scenario, what do you think happens if we turn on the air conditioner? The next simulation does just this. Start the simulation by pressing {{ layout.play }}\n\n<iframe class=\"sim\" src=\"/sim/?preset=CovidInARoomCircling&story&sf=1\" frameborder=\"0\" loading=\"lazy\"></iframe>\n\nNow, instead of a nice clean ring of likely infections, we immediately see that people on the downwind side of the room are much more likely to be infected – people that had a lower chance of infection in a room with no air circulation. If we keep watching, we can see this effect increasing and increasing. Eventually, even those that seemed to be far upwind of the source of infection have some chance of being infected, as the recirculating air slowly carries the virus with it across the room, just like it did in our earlier example.\n\nFinally, we can look at the Concentration View to see how the airflow is breaking not only the left–right symmetry of the room, but also the up–down symmetry. What do you think would happen if we reverse the direction that the waiter is circling the room? How would the picture change?\n\n# Epilogue\nThe story of airborne infections is far from over, but our viral Visual Story has reached its end. Using nothing more than your browser and your curiosity, we've explored how airflow might alter the spread of an airborne virus, witnessed the transient and long-term effects that a simple cough can have, and seen the potentially superspreading effects of a wandering waiter.\n\nAs with all our Stories, it is worth remembering the limitations of what we've learned. Our approach has knowingly ignored lots of factors that could be very important, including the potentially vast differences that can exists between different viruses and between different environments. So, while we've hopefully gained lots of intuition, we would do well to take our conclusions with a healthy pinch of salt.\n\n# Looking for more?\nNot quite had enough of exploring airborne infections? You can play around with the speed of the air by opening our [customisable simulation](/sim/?preset=CovidInARoomCircling) and moving the top-most slider that can be found under <span class='click_sequence'>{{ layout.equations }} → **Parameters**</span> and beneath the label beginning with 'V'. Try exploring how the air speed impacts the spread of the virus.\n\nFor the science behind this Story, we recommend that you check out the [research](https://doi.org/10.1098/rspa.2021.0383) of Zechariah Lau, [Ian Griffiths](https://people.maths.ox.ac.uk/griffit4/) (University of Oxford), [Aaron English](https://twitter.com/aaronenglish001) (University of Parma), and [Katerina Kaouri](https://profiles.cardiff.ac.uk/staff/kaourik) (Cardiff University) on modelling the Covid-19 pandemic, which forms a basis for the mathematical models that we've just explored with VisualPDE. During the pandemic, they used similar models to provide recommendations to policymakers. We recommend checking out their [airborne virus risk calculator](https://people.maths.ox.ac.uk/griffit4/Airborne_Transmission/index.html), which inspired this Visual Story.\n\nEnjoyed this Visual Story? We'd love to hear your feedback at [hello@visualpde.com](mailto:hello@visualpde.com).\n\nLooking for more VisualPDE? Try out our other [Visual Stories](/visual-stories) or some mathematically flavoured content from [Basic PDEs](/basic-pdes).\n\n\n\n","url":"/visual-stories/airborne-infections","tags":"","img":"/assets/images/VirusTransmission.webp","id":43},{"layout":"page","title":"Cleaning up contaminants","lesson_number":30,"thumbnail":"/assets/images/Decontamination.webp","extract":"Chemical decontamination in porous media","equation":null,"body":"In this Story, we’re interested in removing a contaminant from within a porous material by neutralising it in a chemical reaction. For example, the contaminant might be a hazardous liquid chemical that has seeped into a porous building material like concrete. \n\nTo do this in practice, we apply a cleaning chemical to the surface of the concrete, and wait while it diffuses down into the concrete and neutralises the hazardous contaminant. It’s crucial to react away *all* the contaminant. Here, we say the decontamination is complete when there is no contaminant left anywhere in the material, which will correspond to the simulations going completely white.\n\n# How long does it take?\nThe time taken to complete a decontamination depends on many things, including: \n* properties of the chemical, such as the chemical reaction rate, \n* physical parameters, including how deep the spill is, how saturated the material is, and how quickly the cleaning chemical can diffuse through the porous material from the surface where it is applied to where the contamination is.\n\nThe simulation below lets us explore the effect of one of these factors: the chemical reaction rate, which we'll call $k$. Clicking in the simulation adds a blob of cleansing chemical into the material. In reality, this is usually applied just to the upper surface (indicated by a thick black line), but here we can play around and add chemical to wherever we like. Try clicking to introduce cleanser, and watch as the contaminant is cleaned up. At any time, you can reset the simulation by pressing <vpde-reset iframe=\"simA\"></vpde-reset>\n\n<p style=\"text-align:center;margin-bottom:0;\"><vpde-slider\n    iframe=\"simA\"\n    name=\"k\"\n    label=\"$k$:\"\n    min=\"0.01\"\n    max=\"0.5\"\n    value=\"0.1\"\n    step=\"0.01\"\n></vpde-slider></p>\n\n<iframe id=\"simA\" class=\"sim\" src=\"/sim/?preset=DecontaminationDemoSpots&story&no_ui\" frameborder=\"0\" loading=\"lazy\"></iframe>\n\nTo explore the role that the reaction rate plays, try adjusting the slider found just above the simulation, and see what effect clicking has now. For larger rates, the reaction is faster, and this speeds up the overall decontamination of the concrete. \n\nHowever, there’s a limit to how much we can speed it up by just varying this one parameter: for very large $k$, the speed of cleaning is controlled by the rate of transport in the material, not $k$, so we can’t continue to reduce the decontamination time by further increasing $k$. \n\nYou might also notice that for small $k$ the contaminant is reacted away quite evenly everywhere, whereas for large $k$ it only manages to clean small `pockets' of contaminant, leading to sharp boundaries separating the cleansed and contaminated regions.\n\n# How much cleanser do we need?\nIn practice, an easy way to speed up the cleaning process is to add more cleanser. The following pair of simulations lets us see this in action. In each, we're applying cleanser to the top of the concrete, but the simulation on the right is at double strength. Restart the process to get another look by pressing <vpde-reset iframe=\"simB simC\"></vpde-reset>\n\n<div style=\"display:flex\">\n<!-- Invisible sliders to set values in simulation -->\n<vpde-slider style=\"display:none\" iframe=\"simB\" name=\"BC\" value=\"1\"></vpde-slider>\n    <iframe id=\"simB\" class=\"sim\" style=\"width:40%\" src=\"/sim/?preset=DecontaminationDirichlet&story&no_ui\" frameborder=\"0\" loading=\"lazy\"></iframe>\n<vpde-slider style=\"display:none\" iframe=\"simC\" name=\"BC\" value=\"2\"></vpde-slider>\n    <iframe id=\"simC\" class=\"sim\" style=\"width:40%\" src=\"/sim/?preset=DecontaminationDirichlet&story&no_ui\" frameborder=\"0\" loading=\"lazy\"></iframe>\n</div>\n\nHowever, this approach is both wasteful and potentially dangerous: the cleaning chemical might be a strong acid or alkaline (like bleach) and so could damage the concrete if too much is left over after the decontamination. \n\nTo measure this, we can define the efficiency of the decontamination process, which captures how much cleaning chemical is wasted: if the efficiency is 100% then all the cleaning chemical is used up in the decontamination, wasting nothing, but if the efficiency is low then lots of cleaning chemical is left in the concrete at the end of the decontamination.\n\nHere's a rough graph of efficiency vs decontamination time, where each point corresponds to a different amount of applied cleanser.\n\n<img class=\"center\" style=\"width:50%\" src=\"/assets/images/AOW_increasing_cleanser_conc.webp\" alt=\"Graph showing that increasing the amount of cleanser results in faster but less efficient cleaning\">\n\nAs we've already seen, we find that the decontamination is faster when we increase the cleaning solution strength, but it is less efficient. In practice, we would need to choose what strength of cleaning solution to apply (i.e. where on the curve we sit) to get a good trade-off between speed and efficiency.\n\nThis brings us to a final important question:\n\n# Is there a way to reduce waste?\nSince the concentration of applied cleanser is the easiest thing to control, can we apply it in a clever way to keep the decontamination fast, but reduce the wasted cleaning chemical?\n\nLet's explore this with some simulations. We've set up two views into the same simulation: on the left we see the decontaminant, just like before, whilst on the right we see the cleanser (darker blue means more cleanser). The goal: make both simulations go pure white.\n\nUse the slider below to adjust the strength of the applied cleanser throughout the decontamination process. A good idea is to start with a strong cleaning solution and gradually reduce the strength: this keeps the decontamination fast and the efficiency high. Can you find any better ways by exploring? Reset any time by pressing <vpde-reset iframe=\"simD simE\"></vpde-reset>\n\n<p style=\"text-align:center;margin-bottom:0;\"><vpde-slider\n    iframe=\"simD\"\n    name=\"BC\"\n    label=\"$k$:\"\n    min=\"0\"\n    max=\"10\"\n    value=\"10\"\n    step=\"0.1\"\n></vpde-slider></p>\n\n<div style=\"display:flex\">\n    <iframe id=\"simD\" class=\"sim\" src=\"/sim/?preset=DecontaminationDirichlet&story&no_ui\" frameborder=\"0\" loading=\"lazy\"></iframe>\n    <iframe id=\"simE\" class=\"sim\" src=\"/sim/?preset=DecontaminationDirichlet&story&no_ui&view=0\" frameborder=\"0\" loading=\"lazy\"></iframe>\n</div>\n\n\n# Looking for more?\nNot quite had enough of water waves? For a different perspective on this Visual Story, try pressing <span class='click_sequence'>{{ layout.views }} → **3D**</span> in either of the simulations above. What you'll see is the surface of the water drawn in 3D – try dragging to change the view, or clicking on the surface to disturb it, and experience a new point of view.\n\nEnjoyed this Visual Story? We'd love to hear your feedback at [hello@visualpde.com](mailto:hello@visualpde.com).\n\nLooking for more VisualPDE? Try out our other [Visual Stories](/visual-stories) or some mathematically flavoured content from [Basic PDEs](/basic-pdes).\n","url":"/visual-stories/decontamination","tags":"","img":"/assets/images/Decontamination.webp","id":44},{"layout":"page","title":"Ripples on a pond","lesson_number":10,"thumbnail":"/assets/images/ShallowWaterBox.webp","extract":"Making waves in shallow water","equation":null,"body":"Waves on water can be mesmerising, especially the ripples that spread out after an object breaks the surface of an otherwise still liquid. Using VisualPDE, we can play around with water waves without any risk of spillages.\n\nBelow you'll find a VisualPDE simulation set up to let us explore what happens when we press down on the surface of shallow water, just like a drop of water does as it hits the surface. Try clicking in the container to simulate a droplet landing in a still body of water.\n\n<iframe class=\"sim\" src=\"/sim/?preset=ShallowWaterBox&story\" frameborder=\"0\" loading=\"lazy\"></iframe>\n\n# Making waves\nThe drop of liquid immediately disturbs the surface, causing ripples to quickly spread out and fill the container. As soon as the ripples hit the edge of the box, they reflect back and mix with any waves still heading towards the edges. Eventually, these reflected ripples collide with those bouncing off the opposite wall, leading to large peaks and deep troughs.\n\nCuriously, after the ripples collide with one another, they seem to just carry on as if nothing had happened. In fact, the mathematics behind this type of waves tells us that this *always* happens. You can see this phenomenon at work when you throw multiple droplets into the water in rapid succession. You can try this out in real life, or you can press {{ layout.erase }} to reset the simulation and click in a few different places one after the other to try this out with VisualPDE in a water-free way. Regardless of which option you choose, you'll see the ripples pass right through each other, creating ever-changing patterns of overlapping circles. \n\nYou might notice that, as time goes by, the ripples become less and less prominent, until they completely fade away. This is because the waves are losing energy all the time (due to friction and the slight stickiness of the water), leading to a smoother surface that will eventually become still again.\n\nAll the waves that we've made so far have been pretty small. To generate bigger, wider waves, keep your mouse/pointer clicked on the same spot for a few seconds and then let go. Now we get different, large-scale patterns emerging on the surface of the water, whose size comes close to the limits of the theory that we're using to simulate water waves with VisualPDE.\n\n# Time for reflection\nThere is a lot left to explore about waves even in this simple-looking setting, such as investigating what happens when you click and drag? For now, we'll end this short exploration with something that's difficult to see in real life: perfect reflections in a circular container. In the simulation below, we've paused a simulation *just* as a drop of water hits the surface, precisely in the centre of a disc-shaped container. Press {{ layout.play }} to see ripples surge out from the disturbance and reflect simultaneously off the curved boundary, creating ever-more-complicated patterns that are (almost) perfectly symmetric. If you like chaos, you can break the symmetry by clicking anywhere to disturb the surface.\n\n<iframe class=\"sim\" src=\"/sim/?preset=ShallowWaterDisk&story\" frameborder=\"0\" loading=\"lazy\"></iframe>\n\n# Looking for more?\nNot quite had enough of water waves? For a different perspective on this Visual Story, try pressing <span class='click_sequence'>{{ layout.views }} → **3D**</span> in either of the simulations above. What you'll see is the surface of the water drawn in 3D – try dragging to change the view, or clicking on the surface to disturb it, and experience a new point of view.\n\nEnjoyed this Visual Story? We'd love to hear your feedback at [hello@visualpde.com](mailto:hello@visualpde.com).\n\nLooking for more VisualPDE? Try out our other [Visual Stories](/visual-stories) or some mathematically flavoured content from [Basic PDEs](/basic-pdes).\n","url":"/visual-stories/ripples","tags":"","img":"/assets/images/ShallowWaterBox.webp","id":45},{"layout":"page","title":"About","permalink":"/about/","thumbnail":"/assets/images/question-marks.webp","extract":"What is VisualPDE, where did it come from and who is behind it?","body":"VisualPDE is a website designed to bring the world of partial differential equations to a wider audience through the use of real-time interactive web-based simulations usable on almost any device. \n\nWe provide numerous examples of such simulations exploring a wide variety of topics from waves and transport theory, to chaotic nonlinear physical systems and pattern-forming models in mathematical biology. \n\nA good place to start is the library of examples of [basic PDEs](/basic-pdes). Beyond specific examples, we hope to encourage advanced users to design their own examples, and share all of our website and simulation code freely under an [MIT licence](https://github.com/Pecnut/visual-pde/blob/main/LICENSE.md). Anyone can design their own model simulations, and share these with a URL, or copy the markdown-based website design hosted on [GitHub](https://github.com/Pecnut/visual-pde) to design their own website for use in teaching or research communication.\n\nThe ideas for this website originated in a [Durham Centre for Academic Development](https://www.durham.ac.uk/departments/centres/academic-development/) collaborative innovation grant titled *Accessible interactive visualisations in mathematical biology*, which supported Alex Chudasama (a final-year undergraduate at Durham University) to design an early version of an interactive PDE solver based on [this Gray–Scott reaction–diffusion simulator](https://pmneila.github.io/jsexp/grayscott/){:target=\"_blank\"}. \n\nThe current website and tools are written and maintained by [Benjamin Walker](https://benjaminwalker.info/){:target=\"_blank\"} [Adam Townsend](https://adamtownsend.com/){:target=\"_blank\"} and [Andrew Krause](https://www.andrewkrause.org/){:target=\"_blank\"}. A more article about the context, design, and applications of VisualPDE can be found [here](https://doi.org/10.1007/s11538-023-01218-4){:target=\"_blank\"} in the Bulletin of Mathematical Biology.\n","url":"/about","tags":"","img":"/assets/images/question-marks.webp","id":46},{"layout":"topic","title":"Art of PDEs","collection_to_list":"art-pdes","thumbnail":"/assets/images/alan4.webp","extract":"Beauty in time and space","body":"A collection of visually-pleasing simulations, which can be tailored to a user's taste.\n","url":"/art-pdes","tags":"","img":"/assets/images/alan4.webp","id":47},{"layout":"topic","title":"Introductory PDEs","collection_to_list":"basic-pdes","thumbnail":"/assets/images/heat-equation.webp","extract":"Explore simple models interactively","body":"This is a collection of classical linear PDEs that can be explored interactively. They complement the [quick start guide](user-guide/quick-start) in introducing features of the VisualPDE solver.\n","url":"/basic-pdes","tags":"","img":"/assets/images/heat-equation.webp","id":48},{"layout":"topic","title":"Mathematical biology","collection_to_list":"mathematical-biology","thumbnail":"/assets/images/squirrel.webp","extract":"Squirrels, waves and patterns","body":"","url":"/mathematical-biology","tags":"","img":"/assets/images/squirrel.webp","id":49},{"layout":"topic","title":"Nonlinear physics","collection_to_list":"nonlinear-physics","thumbnail":"/assets/images/optics.webp","extract":"Optics, QFT and the rest","body":"","url":"/nonlinear-physics","tags":"","img":"/assets/images/optics.webp","id":50},{"layout":"topic","title":"Numerical methods","collection_to_list":"numerical-methods","thumbnail":"/assets/images/NumericalMethodsImage.webp","extract":"Adventures in numerical analysis","body":"This is a collection of topics on numerical methods/analysis relevant to solving PDEs numerically. These are particularly tailored for how VisualPDE works `under the hood', which is described in more detail in the [solver documentation](user-guide/solver) and the [advanced documentation](user-guide/advanced-options).\n\n","url":"/numerical-methods","tags":"","img":"/assets/images/NumericalMethodsImage.webp","id":51},{"layout":"topic","title":"User guide","collection_to_list":"user-guide","thumbnail":"/assets/images/squirrel-question.webp","extract":"Everything there is to know about VisualPDE","body":"","url":"/user-guide","tags":"","img":"/assets/images/squirrel-question.webp","id":52},{"layout":"topic","title":"Visual stories","collection_to_list":"visual-stories","thumbnail":"/assets/images/OnceUponATime.webp","extract":"Not a mathematician? No problem","body":"With VisualPDE, you don't need to be a mathematician to explore the world with mathematics. Here, we're building a collection of interactive examples and stories that address real-world problems and explore complex phenomena. The best part: the barrier to entry is curiosity, not mathematical knowledge.","url":"/visual-stories","tags":"","img":"/assets/images/OnceUponATime.webp","id":53}]